{"ast":null,"code":"// React Query Configuration - Replaces complex Recoil state management\nimport{QueryClient}from'@tanstack/react-query';// Default query configuration\nconst queryConfig={defaultOptions:{queries:{// Stale time - data is considered fresh for this duration\nstaleTime:1*60*1000,// 1 minute\n// Cache time - how long to keep unused data in cache\ncacheTime:5*60*1000,// 5 minutes\n// Retry configuration\nretry:(failureCount,error)=>{// Don't retry on 4xx errors (client errors)\nif(error.response&&error.response.status>=400&&error.response.status<500){return false;}// Retry up to 3 times for other errors\nreturn failureCount<3;},// Refetch configuration\nrefetchOnWindowFocus:false,refetchOnReconnect:true,// Error handling\nonError:error=>{console.error('Query error:',error);}},mutations:{// Retry configuration for mutations\nretry:(failureCount,error)=>{// Don't retry mutations on client errors\nif(error.response&&error.response.status>=400&&error.response.status<500){return false;}return failureCount<2;},// Error handling\nonError:error=>{console.error('Mutation error:',error);}}}};// Create query client instance\nexport const queryClient=new QueryClient(queryConfig);// Query keys factory - centralized query key management\nexport const queryKeys={// Task-related queries\ntasks:{all:['tasks'],lists:()=>[...queryKeys.tasks.all,'list'],list:filters=>[...queryKeys.tasks.lists(),filters],details:()=>[...queryKeys.tasks.all,'detail'],detail:id=>[...queryKeys.tasks.details(),id],trees:()=>[...queryKeys.tasks.all,'tree'],tree:id=>[...queryKeys.tasks.trees(),id],stats:()=>[...queryKeys.tasks.all,'stats']},// User-related queries\nuser:{all:['user'],profile:()=>[...queryKeys.user.all,'profile'],preferences:()=>[...queryKeys.user.all,'preferences']},// Auth-related queries\nauth:{all:['auth'],session:()=>[...queryKeys.auth.all,'session']}};// Utility function to invalidate related queries\nexport const invalidateQueries={tasks:{all:()=>queryClient.invalidateQueries({queryKey:queryKeys.tasks.all}),list:()=>queryClient.invalidateQueries({queryKey:queryKeys.tasks.lists()}),detail:id=>queryClient.invalidateQueries({queryKey:queryKeys.tasks.detail(id)}),tree:id=>queryClient.invalidateQueries({queryKey:queryKeys.tasks.tree(id)}),stats:()=>queryClient.invalidateQueries({queryKey:queryKeys.tasks.stats()})},user:{all:()=>queryClient.invalidateQueries({queryKey:queryKeys.user.all}),profile:()=>queryClient.invalidateQueries({queryKey:queryKeys.user.profile()})}};export default queryClient;","map":{"version":3,"names":["QueryClient","queryConfig","defaultOptions","queries","staleTime","cacheTime","retry","failureCount","error","response","status","refetchOnWindowFocus","refetchOnReconnect","onError","console","mutations","queryClient","queryKeys","tasks","all","lists","list","filters","details","detail","id","trees","tree","stats","user","profile","preferences","auth","session","invalidateQueries","queryKey"],"sources":["/app/src/lib/query-client.js"],"sourcesContent":["// React Query Configuration - Replaces complex Recoil state management\nimport { QueryClient } from '@tanstack/react-query';\n\n// Default query configuration\nconst queryConfig = {\n  defaultOptions: {\n    queries: {\n      // Stale time - data is considered fresh for this duration\n      staleTime: 1 * 60 * 1000, // 1 minute\n      \n      // Cache time - how long to keep unused data in cache\n      cacheTime: 5 * 60 * 1000, // 5 minutes\n      \n      // Retry configuration\n      retry: (failureCount, error) => {\n        // Don't retry on 4xx errors (client errors)\n        if (error.response && error.response.status >= 400 && error.response.status < 500) {\n          return false;\n        }\n        // Retry up to 3 times for other errors\n        return failureCount < 3;\n      },\n      \n      // Refetch configuration\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: true,\n      \n      // Error handling\n      onError: (error) => {\n        console.error('Query error:', error);\n      },\n    },\n    mutations: {\n      // Retry configuration for mutations\n      retry: (failureCount, error) => {\n        // Don't retry mutations on client errors\n        if (error.response && error.response.status >= 400 && error.response.status < 500) {\n          return false;\n        }\n        return failureCount < 2;\n      },\n      \n      // Error handling\n      onError: (error) => {\n        console.error('Mutation error:', error);\n      },\n    },\n  },\n};\n\n// Create query client instance\nexport const queryClient = new QueryClient(queryConfig);\n\n// Query keys factory - centralized query key management\nexport const queryKeys = {\n  // Task-related queries\n  tasks: {\n    all: ['tasks'],\n    lists: () => [...queryKeys.tasks.all, 'list'],\n    list: (filters) => [...queryKeys.tasks.lists(), filters],\n    details: () => [...queryKeys.tasks.all, 'detail'],\n    detail: (id) => [...queryKeys.tasks.details(), id],\n    trees: () => [...queryKeys.tasks.all, 'tree'],\n    tree: (id) => [...queryKeys.tasks.trees(), id],\n    stats: () => [...queryKeys.tasks.all, 'stats'],\n  },\n  \n  // User-related queries\n  user: {\n    all: ['user'],\n    profile: () => [...queryKeys.user.all, 'profile'],\n    preferences: () => [...queryKeys.user.all, 'preferences'],\n  },\n  \n  // Auth-related queries\n  auth: {\n    all: ['auth'],\n    session: () => [...queryKeys.auth.all, 'session'],\n  },\n};\n\n// Utility function to invalidate related queries\nexport const invalidateQueries = {\n  tasks: {\n    all: () => queryClient.invalidateQueries({ queryKey: queryKeys.tasks.all }),\n    list: () => queryClient.invalidateQueries({ queryKey: queryKeys.tasks.lists() }),\n    detail: (id) => queryClient.invalidateQueries({ queryKey: queryKeys.tasks.detail(id) }),\n    tree: (id) => queryClient.invalidateQueries({ queryKey: queryKeys.tasks.tree(id) }),\n    stats: () => queryClient.invalidateQueries({ queryKey: queryKeys.tasks.stats() }),\n  },\n  user: {\n    all: () => queryClient.invalidateQueries({ queryKey: queryKeys.user.all }),\n    profile: () => queryClient.invalidateQueries({ queryKey: queryKeys.user.profile() }),\n  },\n};\n\nexport default queryClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}