{"ast":null,"code":"// Simplified WebSocket Context - Replaces complex per-task WebSocket connections\nimport React,{createContext,useContext,useEffect,useRef,useState}from'react';import{useQueryClient}from'@tanstack/react-query';import{queryKeys,invalidateQueries}from'../lib/query-client';import{useAuth}from'./AuthContext';import{useApp}from'./AppContext';import{jsx as _jsx}from\"react/jsx-runtime\";const WebSocketContext=/*#__PURE__*/createContext();// WebSocket connection manager\nclass WebSocketManager{constructor(){this.ws=null;this.subscribers=new Map();this.reconnectAttempts=0;this.maxReconnectAttempts=5;this.reconnectDelay=1000;// Start with 1 second\nthis.isConnecting=false;this.shouldReconnect=true;}connect(url,token){if(this.ws&&this.ws.readyState===WebSocket.OPEN){return Promise.resolve();}if(this.isConnecting){return Promise.resolve();}this.isConnecting=true;this.shouldReconnect=true;return new Promise((resolve,reject)=>{try{// Add auth token to WebSocket URL\nconst wsUrl=new URL(url);wsUrl.searchParams.set('token',token);this.ws=new WebSocket(wsUrl.toString());this.ws.onopen=()=>{this.isConnecting=false;this.reconnectAttempts=0;this.reconnectDelay=1000;this.notifySubscribers('connected',{connected:true});resolve();};this.ws.onmessage=event=>{try{const data=JSON.parse(event.data);this.notifySubscribers('message',data);}catch(error){console.error('Failed to parse WebSocket message:',error);}};this.ws.onclose=event=>{this.isConnecting=false;this.notifySubscribers('disconnected',{connected:false});if(this.shouldReconnect&&this.reconnectAttempts<this.maxReconnectAttempts){this.scheduleReconnect(url,token);}};this.ws.onerror=error=>{console.error('WebSocket error:',error);this.isConnecting=false;this.notifySubscribers('error',error);reject(error);};}catch(error){this.isConnecting=false;reject(error);}});}scheduleReconnect(url,token){this.reconnectAttempts++;const delay=Math.min(this.reconnectDelay*Math.pow(2,this.reconnectAttempts-1),30000);setTimeout(()=>{if(this.shouldReconnect){this.connect(url,token).catch(error=>{console.error('Reconnect failed:',error);});}},delay);}disconnect(){this.shouldReconnect=false;if(this.ws){this.ws.close();this.ws=null;}this.subscribers.clear();}subscribe(id,callback){this.subscribers.set(id,callback);// Return unsubscribe function\nreturn()=>{this.subscribers.delete(id);};}notifySubscribers(type,data){this.subscribers.forEach(callback=>{try{callback(type,data);}catch(error){console.error('Error in WebSocket subscriber:',error);}});}isConnected(){return this.ws&&this.ws.readyState===WebSocket.OPEN;}send(data){if(this.isConnected()){this.ws.send(JSON.stringify(data));return true;}return false;}}// Create singleton instance\nconst wsManager=new WebSocketManager();export const WebSocketProvider=_ref=>{let{children}=_ref;const[connectionState,setConnectionState]=useState({connected:false,connecting:false,error:null});const{user,isAuthenticated}=useAuth();const{showError,showSuccess}=useApp();const queryClient=useQueryClient();const subscriptionRef=useRef(null);// WebSocket URL construction\nconst getWebSocketUrl=()=>{const protocol=window.location.protocol==='https:'?'wss:':'ws:';const host=window.location.hostname;const port=window.location.port||(window.location.protocol==='https:'?'443':'80');return`${protocol}//${host}${port!=='80'&&port!=='443'?':'+port:''}/ws/global`;};// Handle WebSocket messages\nconst handleWebSocketMessage=(type,data)=>{switch(type){case'connected':setConnectionState({connected:true,connecting:false,error:null});break;case'disconnected':setConnectionState({connected:false,connecting:false,error:null});break;case'error':setConnectionState({connected:false,connecting:false,error:data});showError('WebSocket connection error');break;case'message':handleTaskMessage(data);break;}};// Handle task-related messages\nconst handleTaskMessage=data=>{if(!data.type)return;switch(data.type){case'task.created':case'task.updated':case'task.status_changed':// Invalidate task list and stats\ninvalidateQueries.tasks.list();invalidateQueries.tasks.stats();// Update specific task if we have the ID\nif(data.task_id){queryClient.invalidateQueries({queryKey:queryKeys.tasks.detail(data.task_id)});queryClient.invalidateQueries({queryKey:queryKeys.tasks.tree(data.task_id)});}break;case'task.approved':// Show success notification\nshowSuccess(`Task approved: ${data.task_id} by ${data.approved_by}`);// Invalidate task list and stats to refresh pending approvals\ninvalidateQueries.tasks.list();invalidateQueries.tasks.stats();// Update specific task\nif(data.task_id){queryClient.invalidateQueries({queryKey:queryKeys.tasks.detail(data.task_id)});queryClient.invalidateQueries({queryKey:queryKeys.tasks.tree(data.task_id)});}break;case'task.rejected':// Show rejection notification\nconst message=data.new_description?`Task rejected and resubmitted: ${data.task_id} by ${data.rejected_by}`:`Task rejected: ${data.task_id} by ${data.rejected_by}`;showError(message);// Invalidate task list and stats to refresh pending approvals\ninvalidateQueries.tasks.list();invalidateQueries.tasks.stats();// Update specific task\nif(data.task_id){queryClient.invalidateQueries({queryKey:queryKeys.tasks.detail(data.task_id)});queryClient.invalidateQueries({queryKey:queryKeys.tasks.tree(data.task_id)});}break;case'task.completed':// Show success notification\nshowSuccess(`Task completed: ${data.description||data.task_id}`);// Invalidate related queries\ninvalidateQueries.tasks.list();invalidateQueries.tasks.stats();if(data.task_id){queryClient.invalidateQueries({queryKey:queryKeys.tasks.detail(data.task_id)});queryClient.invalidateQueries({queryKey:queryKeys.tasks.tree(data.task_id)});}break;case'task.deleted':// Remove from cache\nif(data.task_id){queryClient.removeQueries({queryKey:queryKeys.tasks.detail(data.task_id)});queryClient.removeQueries({queryKey:queryKeys.tasks.tree(data.task_id)});}// Invalidate list and stats\ninvalidateQueries.tasks.list();invalidateQueries.tasks.stats();break;case'operator.status':// Handle operator status updates\n// Could show loading states based on operator progress\nbreak;case'service.status':// Handle detailed service status updates\n// Don't show notifications - let individual components handle service.status events\n// This allows DecompositionStatus to display them as status messages instead\n// Still invalidate queries to refresh UI if needed\nif(data.task_id){queryClient.invalidateQueries({queryKey:queryKeys.tasks.detail(data.task_id)});queryClient.invalidateQueries({queryKey:queryKeys.tasks.tree(data.task_id)});}break;}};// Connect when authenticated\nuseEffect(()=>{if(isAuthenticated()&&user){const token=localStorage.getItem('token')||'dev-bypass-token';setConnectionState({connected:false,connecting:true,error:null});// Subscribe to WebSocket events\nsubscriptionRef.current=wsManager.subscribe('app-context',handleWebSocketMessage);// Connect\nwsManager.connect(getWebSocketUrl(),token).then(()=>{}).catch(error=>{console.error('WebSocket connection failed:',error);setConnectionState({connected:false,connecting:false,error});});}else{// Disconnect when not authenticated\nif(subscriptionRef.current){subscriptionRef.current();subscriptionRef.current=null;}wsManager.disconnect();setConnectionState({connected:false,connecting:false,error:null});}// Cleanup on unmount\nreturn()=>{if(subscriptionRef.current){subscriptionRef.current();}};},[isAuthenticated(),user]);// Context value\nconst contextValue={// Connection state\n...connectionState,// Actions\nsend:data=>wsManager.send(data),reconnect:()=>{if(isAuthenticated()&&user){const token=localStorage.getItem('token')||'dev-bypass-token';return wsManager.connect(getWebSocketUrl(),token);}},// Subscribe to specific message types\nsubscribe:callback=>wsManager.subscribe(`subscriber-${Date.now()}`,(type,data)=>{// For 'message' events, forward the actual message data\n// For other events (connected, disconnected, error), forward the event info\nif(type==='message'){callback(data);}else{callback(type);}})};return/*#__PURE__*/_jsx(WebSocketContext.Provider,{value:contextValue,children:children});};// Custom hook to use WebSocket context\nexport const useWebSocket=()=>{const context=useContext(WebSocketContext);if(!context){throw new Error('useWebSocket must be used within a WebSocketProvider');}return context;};export default WebSocketContext;","map":{"version":3,"names":["React","createContext","useContext","useEffect","useRef","useState","useQueryClient","queryKeys","invalidateQueries","useAuth","useApp","jsx","_jsx","WebSocketContext","WebSocketManager","constructor","ws","subscribers","Map","reconnectAttempts","maxReconnectAttempts","reconnectDelay","isConnecting","shouldReconnect","connect","url","token","readyState","WebSocket","OPEN","Promise","resolve","reject","wsUrl","URL","searchParams","set","toString","onopen","notifySubscribers","connected","onmessage","event","data","JSON","parse","error","console","onclose","scheduleReconnect","onerror","delay","Math","min","pow","setTimeout","catch","disconnect","close","clear","subscribe","id","callback","delete","type","forEach","isConnected","send","stringify","wsManager","WebSocketProvider","_ref","children","connectionState","setConnectionState","connecting","user","isAuthenticated","showError","showSuccess","queryClient","subscriptionRef","getWebSocketUrl","protocol","window","location","host","hostname","port","handleWebSocketMessage","handleTaskMessage","tasks","list","stats","task_id","queryKey","detail","tree","approved_by","message","new_description","rejected_by","description","removeQueries","localStorage","getItem","current","then","contextValue","reconnect","Date","now","Provider","value","useWebSocket","context","Error"],"sources":["/app/src/contexts/WebSocketContext.js"],"sourcesContent":["// Simplified WebSocket Context - Replaces complex per-task WebSocket connections\nimport React, { createContext, useContext, useEffect, useRef, useState } from 'react';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { queryKeys, invalidateQueries } from '../lib/query-client';\nimport { useAuth } from './AuthContext';\nimport { useApp } from './AppContext';\n\nconst WebSocketContext = createContext();\n\n// WebSocket connection manager\nclass WebSocketManager {\n  constructor() {\n    this.ws = null;\n    this.subscribers = new Map();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000; // Start with 1 second\n    this.isConnecting = false;\n    this.shouldReconnect = true;\n  }\n\n  connect(url, token) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      return Promise.resolve();\n    }\n\n    if (this.isConnecting) {\n      return Promise.resolve();\n    }\n\n    this.isConnecting = true;\n    this.shouldReconnect = true;\n\n    return new Promise((resolve, reject) => {\n      try {\n        // Add auth token to WebSocket URL\n        const wsUrl = new URL(url);\n        wsUrl.searchParams.set('token', token);\n        \n        this.ws = new WebSocket(wsUrl.toString());\n\n        this.ws.onopen = () => {\n          this.isConnecting = false;\n          this.reconnectAttempts = 0;\n          this.reconnectDelay = 1000;\n          this.notifySubscribers('connected', { connected: true });\n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            this.notifySubscribers('message', data);\n          } catch (error) {\n            console.error('Failed to parse WebSocket message:', error);\n          }\n        };\n\n        this.ws.onclose = (event) => {\n          this.isConnecting = false;\n          this.notifySubscribers('disconnected', { connected: false });\n          \n          if (this.shouldReconnect && this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.scheduleReconnect(url, token);\n          }\n        };\n\n        this.ws.onerror = (error) => {\n          console.error('WebSocket error:', error);\n          this.isConnecting = false;\n          this.notifySubscribers('error', error);\n          reject(error);\n        };\n      } catch (error) {\n        this.isConnecting = false;\n        reject(error);\n      }\n    });\n  }\n\n  scheduleReconnect(url, token) {\n    this.reconnectAttempts++;\n    const delay = Math.min(this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1), 30000);\n    \n    \n    setTimeout(() => {\n      if (this.shouldReconnect) {\n        this.connect(url, token).catch(error => {\n          console.error('Reconnect failed:', error);\n        });\n      }\n    }, delay);\n  }\n\n  disconnect() {\n    this.shouldReconnect = false;\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.subscribers.clear();\n  }\n\n  subscribe(id, callback) {\n    this.subscribers.set(id, callback);\n    \n    // Return unsubscribe function\n    return () => {\n      this.subscribers.delete(id);\n    };\n  }\n\n  notifySubscribers(type, data) {\n    this.subscribers.forEach(callback => {\n      try {\n        callback(type, data);\n      } catch (error) {\n        console.error('Error in WebSocket subscriber:', error);\n      }\n    });\n  }\n\n  isConnected() {\n    return this.ws && this.ws.readyState === WebSocket.OPEN;\n  }\n\n  send(data) {\n    if (this.isConnected()) {\n      this.ws.send(JSON.stringify(data));\n      return true;\n    }\n    return false;\n  }\n}\n\n// Create singleton instance\nconst wsManager = new WebSocketManager();\n\nexport const WebSocketProvider = ({ children }) => {\n  const [connectionState, setConnectionState] = useState({\n    connected: false,\n    connecting: false,\n    error: null,\n  });\n  \n  const { user, isAuthenticated } = useAuth();\n  const { showError, showSuccess } = useApp();\n  const queryClient = useQueryClient();\n  const subscriptionRef = useRef(null);\n\n  // WebSocket URL construction\n  const getWebSocketUrl = () => {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const host = window.location.hostname;\n    const port = window.location.port || (window.location.protocol === 'https:' ? '443' : '80');\n    \n    return `${protocol}//${host}${port !== '80' && port !== '443' ? ':' + port : ''}/ws/global`;\n  };\n\n  // Handle WebSocket messages\n  const handleWebSocketMessage = (type, data) => {\n    switch (type) {\n      case 'connected':\n        setConnectionState({ connected: true, connecting: false, error: null });\n        break;\n        \n      case 'disconnected':\n        setConnectionState({ connected: false, connecting: false, error: null });\n        break;\n        \n      case 'error':\n        setConnectionState({ connected: false, connecting: false, error: data });\n        showError('WebSocket connection error');\n        break;\n        \n      case 'message':\n        handleTaskMessage(data);\n        break;\n    }\n  };\n\n  // Handle task-related messages\n  const handleTaskMessage = (data) => {\n    if (!data.type) return;\n\n\n    switch (data.type) {\n      case 'task.created':\n      case 'task.updated':\n      case 'task.status_changed':\n        // Invalidate task list and stats\n        invalidateQueries.tasks.list();\n        invalidateQueries.tasks.stats();\n        \n        // Update specific task if we have the ID\n        if (data.task_id) {\n          queryClient.invalidateQueries({ \n            queryKey: queryKeys.tasks.detail(data.task_id) \n          });\n          queryClient.invalidateQueries({ \n            queryKey: queryKeys.tasks.tree(data.task_id) \n          });\n        }\n        break;\n        \n      case 'task.approved':\n        // Show success notification\n        showSuccess(`Task approved: ${data.task_id} by ${data.approved_by}`);\n        \n        // Invalidate task list and stats to refresh pending approvals\n        invalidateQueries.tasks.list();\n        invalidateQueries.tasks.stats();\n        \n        // Update specific task\n        if (data.task_id) {\n          queryClient.invalidateQueries({ \n            queryKey: queryKeys.tasks.detail(data.task_id) \n          });\n          queryClient.invalidateQueries({ \n            queryKey: queryKeys.tasks.tree(data.task_id) \n          });\n        }\n        break;\n        \n      case 'task.rejected':\n        // Show rejection notification\n        const message = data.new_description \n          ? `Task rejected and resubmitted: ${data.task_id} by ${data.rejected_by}`\n          : `Task rejected: ${data.task_id} by ${data.rejected_by}`;\n        showError(message);\n        \n        // Invalidate task list and stats to refresh pending approvals\n        invalidateQueries.tasks.list();\n        invalidateQueries.tasks.stats();\n        \n        // Update specific task\n        if (data.task_id) {\n          queryClient.invalidateQueries({ \n            queryKey: queryKeys.tasks.detail(data.task_id) \n          });\n          queryClient.invalidateQueries({ \n            queryKey: queryKeys.tasks.tree(data.task_id) \n          });\n        }\n        break;\n        \n      case 'task.completed':\n        // Show success notification\n        showSuccess(`Task completed: ${data.description || data.task_id}`);\n        \n        // Invalidate related queries\n        invalidateQueries.tasks.list();\n        invalidateQueries.tasks.stats();\n        \n        if (data.task_id) {\n          queryClient.invalidateQueries({ \n            queryKey: queryKeys.tasks.detail(data.task_id) \n          });\n          queryClient.invalidateQueries({ \n            queryKey: queryKeys.tasks.tree(data.task_id) \n          });\n        }\n        break;\n        \n      case 'task.deleted':\n        // Remove from cache\n        if (data.task_id) {\n          queryClient.removeQueries({ \n            queryKey: queryKeys.tasks.detail(data.task_id) \n          });\n          queryClient.removeQueries({ \n            queryKey: queryKeys.tasks.tree(data.task_id) \n          });\n        }\n        \n        // Invalidate list and stats\n        invalidateQueries.tasks.list();\n        invalidateQueries.tasks.stats();\n        break;\n        \n      case 'operator.status':\n        // Handle operator status updates\n        // Could show loading states based on operator progress\n        break;\n        \n      case 'service.status':\n        // Handle detailed service status updates\n        \n        // Don't show notifications - let individual components handle service.status events\n        // This allows DecompositionStatus to display them as status messages instead\n        \n        // Still invalidate queries to refresh UI if needed\n        if (data.task_id) {\n          queryClient.invalidateQueries({ \n            queryKey: queryKeys.tasks.detail(data.task_id) \n          });\n          queryClient.invalidateQueries({ \n            queryKey: queryKeys.tasks.tree(data.task_id) \n          });\n        }\n        break;\n    }\n  };\n\n  // Connect when authenticated\n  useEffect(() => {\n    if (isAuthenticated() && user) {\n      const token = localStorage.getItem('token') || 'dev-bypass-token';\n      setConnectionState({ connected: false, connecting: true, error: null });\n      \n      // Subscribe to WebSocket events\n      subscriptionRef.current = wsManager.subscribe(\n        'app-context',\n        handleWebSocketMessage\n      );\n      \n      // Connect\n      wsManager.connect(getWebSocketUrl(), token)\n        .then(() => {\n        })\n        .catch(error => {\n          console.error('WebSocket connection failed:', error);\n          setConnectionState({ connected: false, connecting: false, error });\n        });\n    } else {\n      // Disconnect when not authenticated\n      if (subscriptionRef.current) {\n        subscriptionRef.current();\n        subscriptionRef.current = null;\n      }\n      wsManager.disconnect();\n      setConnectionState({ connected: false, connecting: false, error: null });\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (subscriptionRef.current) {\n        subscriptionRef.current();\n      }\n    };\n  }, [isAuthenticated(), user]);\n\n  // Context value\n  const contextValue = {\n    // Connection state\n    ...connectionState,\n    \n    // Actions\n    send: (data) => wsManager.send(data),\n    reconnect: () => {\n      if (isAuthenticated() && user) {\n        const token = localStorage.getItem('token') || 'dev-bypass-token';\n        return wsManager.connect(getWebSocketUrl(), token);\n      }\n    },\n    \n    // Subscribe to specific message types\n    subscribe: (callback) => wsManager.subscribe(`subscriber-${Date.now()}`, (type, data) => {\n      // For 'message' events, forward the actual message data\n      // For other events (connected, disconnected, error), forward the event info\n      if (type === 'message') {\n        callback(data);\n      } else {\n        callback(type);\n      }\n    }),\n  };\n\n  return (\n    <WebSocketContext.Provider value={contextValue}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n};\n\n// Custom hook to use WebSocket context\nexport const useWebSocket = () => {\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocket must be used within a WebSocketProvider');\n  }\n  return context;\n};\n\nexport default WebSocketContext;"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CACrF,OAASC,cAAc,KAAQ,uBAAuB,CACtD,OAASC,SAAS,CAAEC,iBAAiB,KAAQ,qBAAqB,CAClE,OAASC,OAAO,KAAQ,eAAe,CACvC,OAASC,MAAM,KAAQ,cAAc,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEtC,KAAM,CAAAC,gBAAgB,cAAGZ,aAAa,CAAC,CAAC,CAExC;AACA,KAAM,CAAAa,gBAAiB,CACrBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,EAAE,CAAG,IAAI,CACd,IAAI,CAACC,WAAW,CAAG,GAAI,CAAAC,GAAG,CAAC,CAAC,CAC5B,IAAI,CAACC,iBAAiB,CAAG,CAAC,CAC1B,IAAI,CAACC,oBAAoB,CAAG,CAAC,CAC7B,IAAI,CAACC,cAAc,CAAG,IAAI,CAAE;AAC5B,IAAI,CAACC,YAAY,CAAG,KAAK,CACzB,IAAI,CAACC,eAAe,CAAG,IAAI,CAC7B,CAEAC,OAAOA,CAACC,GAAG,CAAEC,KAAK,CAAE,CAClB,GAAI,IAAI,CAACV,EAAE,EAAI,IAAI,CAACA,EAAE,CAACW,UAAU,GAAKC,SAAS,CAACC,IAAI,CAAE,CACpD,MAAO,CAAAC,OAAO,CAACC,OAAO,CAAC,CAAC,CAC1B,CAEA,GAAI,IAAI,CAACT,YAAY,CAAE,CACrB,MAAO,CAAAQ,OAAO,CAACC,OAAO,CAAC,CAAC,CAC1B,CAEA,IAAI,CAACT,YAAY,CAAG,IAAI,CACxB,IAAI,CAACC,eAAe,CAAG,IAAI,CAE3B,MAAO,IAAI,CAAAO,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtC,GAAI,CACF;AACA,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAC,GAAG,CAACT,GAAG,CAAC,CAC1BQ,KAAK,CAACE,YAAY,CAACC,GAAG,CAAC,OAAO,CAAEV,KAAK,CAAC,CAEtC,IAAI,CAACV,EAAE,CAAG,GAAI,CAAAY,SAAS,CAACK,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC,CAEzC,IAAI,CAACrB,EAAE,CAACsB,MAAM,CAAG,IAAM,CACrB,IAAI,CAAChB,YAAY,CAAG,KAAK,CACzB,IAAI,CAACH,iBAAiB,CAAG,CAAC,CAC1B,IAAI,CAACE,cAAc,CAAG,IAAI,CAC1B,IAAI,CAACkB,iBAAiB,CAAC,WAAW,CAAE,CAAEC,SAAS,CAAE,IAAK,CAAC,CAAC,CACxDT,OAAO,CAAC,CAAC,CACX,CAAC,CAED,IAAI,CAACf,EAAE,CAACyB,SAAS,CAAIC,KAAK,EAAK,CAC7B,GAAI,CACF,KAAM,CAAAC,IAAI,CAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC,CACnC,IAAI,CAACJ,iBAAiB,CAAC,SAAS,CAAEI,IAAI,CAAC,CACzC,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAAC,CAC5D,CACF,CAAC,CAED,IAAI,CAAC9B,EAAE,CAACgC,OAAO,CAAIN,KAAK,EAAK,CAC3B,IAAI,CAACpB,YAAY,CAAG,KAAK,CACzB,IAAI,CAACiB,iBAAiB,CAAC,cAAc,CAAE,CAAEC,SAAS,CAAE,KAAM,CAAC,CAAC,CAE5D,GAAI,IAAI,CAACjB,eAAe,EAAI,IAAI,CAACJ,iBAAiB,CAAG,IAAI,CAACC,oBAAoB,CAAE,CAC9E,IAAI,CAAC6B,iBAAiB,CAACxB,GAAG,CAAEC,KAAK,CAAC,CACpC,CACF,CAAC,CAED,IAAI,CAACV,EAAE,CAACkC,OAAO,CAAIJ,KAAK,EAAK,CAC3BC,OAAO,CAACD,KAAK,CAAC,kBAAkB,CAAEA,KAAK,CAAC,CACxC,IAAI,CAACxB,YAAY,CAAG,KAAK,CACzB,IAAI,CAACiB,iBAAiB,CAAC,OAAO,CAAEO,KAAK,CAAC,CACtCd,MAAM,CAACc,KAAK,CAAC,CACf,CAAC,CACH,CAAE,MAAOA,KAAK,CAAE,CACd,IAAI,CAACxB,YAAY,CAAG,KAAK,CACzBU,MAAM,CAACc,KAAK,CAAC,CACf,CACF,CAAC,CAAC,CACJ,CAEAG,iBAAiBA,CAACxB,GAAG,CAAEC,KAAK,CAAE,CAC5B,IAAI,CAACP,iBAAiB,EAAE,CACxB,KAAM,CAAAgC,KAAK,CAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAChC,cAAc,CAAG+B,IAAI,CAACE,GAAG,CAAC,CAAC,CAAE,IAAI,CAACnC,iBAAiB,CAAG,CAAC,CAAC,CAAE,KAAK,CAAC,CAG5FoC,UAAU,CAAC,IAAM,CACf,GAAI,IAAI,CAAChC,eAAe,CAAE,CACxB,IAAI,CAACC,OAAO,CAACC,GAAG,CAAEC,KAAK,CAAC,CAAC8B,KAAK,CAACV,KAAK,EAAI,CACtCC,OAAO,CAACD,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAAC,CAC3C,CAAC,CAAC,CACJ,CACF,CAAC,CAAEK,KAAK,CAAC,CACX,CAEAM,UAAUA,CAAA,CAAG,CACX,IAAI,CAAClC,eAAe,CAAG,KAAK,CAC5B,GAAI,IAAI,CAACP,EAAE,CAAE,CACX,IAAI,CAACA,EAAE,CAAC0C,KAAK,CAAC,CAAC,CACf,IAAI,CAAC1C,EAAE,CAAG,IAAI,CAChB,CACA,IAAI,CAACC,WAAW,CAAC0C,KAAK,CAAC,CAAC,CAC1B,CAEAC,SAASA,CAACC,EAAE,CAAEC,QAAQ,CAAE,CACtB,IAAI,CAAC7C,WAAW,CAACmB,GAAG,CAACyB,EAAE,CAAEC,QAAQ,CAAC,CAElC;AACA,MAAO,IAAM,CACX,IAAI,CAAC7C,WAAW,CAAC8C,MAAM,CAACF,EAAE,CAAC,CAC7B,CAAC,CACH,CAEAtB,iBAAiBA,CAACyB,IAAI,CAAErB,IAAI,CAAE,CAC5B,IAAI,CAAC1B,WAAW,CAACgD,OAAO,CAACH,QAAQ,EAAI,CACnC,GAAI,CACFA,QAAQ,CAACE,IAAI,CAAErB,IAAI,CAAC,CACtB,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACxD,CACF,CAAC,CAAC,CACJ,CAEAoB,WAAWA,CAAA,CAAG,CACZ,MAAO,KAAI,CAAClD,EAAE,EAAI,IAAI,CAACA,EAAE,CAACW,UAAU,GAAKC,SAAS,CAACC,IAAI,CACzD,CAEAsC,IAAIA,CAACxB,IAAI,CAAE,CACT,GAAI,IAAI,CAACuB,WAAW,CAAC,CAAC,CAAE,CACtB,IAAI,CAAClD,EAAE,CAACmD,IAAI,CAACvB,IAAI,CAACwB,SAAS,CAACzB,IAAI,CAAC,CAAC,CAClC,MAAO,KAAI,CACb,CACA,MAAO,MAAK,CACd,CACF,CAEA;AACA,KAAM,CAAA0B,SAAS,CAAG,GAAI,CAAAvD,gBAAgB,CAAC,CAAC,CAExC,MAAO,MAAM,CAAAwD,iBAAiB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC5C,KAAM,CAACE,eAAe,CAAEC,kBAAkB,CAAC,CAAGrE,QAAQ,CAAC,CACrDmC,SAAS,CAAE,KAAK,CAChBmC,UAAU,CAAE,KAAK,CACjB7B,KAAK,CAAE,IACT,CAAC,CAAC,CAEF,KAAM,CAAE8B,IAAI,CAAEC,eAAgB,CAAC,CAAGpE,OAAO,CAAC,CAAC,CAC3C,KAAM,CAAEqE,SAAS,CAAEC,WAAY,CAAC,CAAGrE,MAAM,CAAC,CAAC,CAC3C,KAAM,CAAAsE,WAAW,CAAG1E,cAAc,CAAC,CAAC,CACpC,KAAM,CAAA2E,eAAe,CAAG7E,MAAM,CAAC,IAAI,CAAC,CAEpC;AACA,KAAM,CAAA8E,eAAe,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,QAAQ,CAAGC,MAAM,CAACC,QAAQ,CAACF,QAAQ,GAAK,QAAQ,CAAG,MAAM,CAAG,KAAK,CACvE,KAAM,CAAAG,IAAI,CAAGF,MAAM,CAACC,QAAQ,CAACE,QAAQ,CACrC,KAAM,CAAAC,IAAI,CAAGJ,MAAM,CAACC,QAAQ,CAACG,IAAI,GAAKJ,MAAM,CAACC,QAAQ,CAACF,QAAQ,GAAK,QAAQ,CAAG,KAAK,CAAG,IAAI,CAAC,CAE3F,MAAO,GAAGA,QAAQ,KAAKG,IAAI,GAAGE,IAAI,GAAK,IAAI,EAAIA,IAAI,GAAK,KAAK,CAAG,GAAG,CAAGA,IAAI,CAAG,EAAE,YAAY,CAC7F,CAAC,CAED;AACA,KAAM,CAAAC,sBAAsB,CAAGA,CAACzB,IAAI,CAAErB,IAAI,GAAK,CAC7C,OAAQqB,IAAI,EACV,IAAK,WAAW,CACdU,kBAAkB,CAAC,CAAElC,SAAS,CAAE,IAAI,CAAEmC,UAAU,CAAE,KAAK,CAAE7B,KAAK,CAAE,IAAK,CAAC,CAAC,CACvE,MAEF,IAAK,cAAc,CACjB4B,kBAAkB,CAAC,CAAElC,SAAS,CAAE,KAAK,CAAEmC,UAAU,CAAE,KAAK,CAAE7B,KAAK,CAAE,IAAK,CAAC,CAAC,CACxE,MAEF,IAAK,OAAO,CACV4B,kBAAkB,CAAC,CAAElC,SAAS,CAAE,KAAK,CAAEmC,UAAU,CAAE,KAAK,CAAE7B,KAAK,CAAEH,IAAK,CAAC,CAAC,CACxEmC,SAAS,CAAC,4BAA4B,CAAC,CACvC,MAEF,IAAK,SAAS,CACZY,iBAAiB,CAAC/C,IAAI,CAAC,CACvB,MACJ,CACF,CAAC,CAED;AACA,KAAM,CAAA+C,iBAAiB,CAAI/C,IAAI,EAAK,CAClC,GAAI,CAACA,IAAI,CAACqB,IAAI,CAAE,OAGhB,OAAQrB,IAAI,CAACqB,IAAI,EACf,IAAK,cAAc,CACnB,IAAK,cAAc,CACnB,IAAK,qBAAqB,CACxB;AACAxD,iBAAiB,CAACmF,KAAK,CAACC,IAAI,CAAC,CAAC,CAC9BpF,iBAAiB,CAACmF,KAAK,CAACE,KAAK,CAAC,CAAC,CAE/B;AACA,GAAIlD,IAAI,CAACmD,OAAO,CAAE,CAChBd,WAAW,CAACxE,iBAAiB,CAAC,CAC5BuF,QAAQ,CAAExF,SAAS,CAACoF,KAAK,CAACK,MAAM,CAACrD,IAAI,CAACmD,OAAO,CAC/C,CAAC,CAAC,CACFd,WAAW,CAACxE,iBAAiB,CAAC,CAC5BuF,QAAQ,CAAExF,SAAS,CAACoF,KAAK,CAACM,IAAI,CAACtD,IAAI,CAACmD,OAAO,CAC7C,CAAC,CAAC,CACJ,CACA,MAEF,IAAK,eAAe,CAClB;AACAf,WAAW,CAAC,kBAAkBpC,IAAI,CAACmD,OAAO,OAAOnD,IAAI,CAACuD,WAAW,EAAE,CAAC,CAEpE;AACA1F,iBAAiB,CAACmF,KAAK,CAACC,IAAI,CAAC,CAAC,CAC9BpF,iBAAiB,CAACmF,KAAK,CAACE,KAAK,CAAC,CAAC,CAE/B;AACA,GAAIlD,IAAI,CAACmD,OAAO,CAAE,CAChBd,WAAW,CAACxE,iBAAiB,CAAC,CAC5BuF,QAAQ,CAAExF,SAAS,CAACoF,KAAK,CAACK,MAAM,CAACrD,IAAI,CAACmD,OAAO,CAC/C,CAAC,CAAC,CACFd,WAAW,CAACxE,iBAAiB,CAAC,CAC5BuF,QAAQ,CAAExF,SAAS,CAACoF,KAAK,CAACM,IAAI,CAACtD,IAAI,CAACmD,OAAO,CAC7C,CAAC,CAAC,CACJ,CACA,MAEF,IAAK,eAAe,CAClB;AACA,KAAM,CAAAK,OAAO,CAAGxD,IAAI,CAACyD,eAAe,CAChC,kCAAkCzD,IAAI,CAACmD,OAAO,OAAOnD,IAAI,CAAC0D,WAAW,EAAE,CACvE,kBAAkB1D,IAAI,CAACmD,OAAO,OAAOnD,IAAI,CAAC0D,WAAW,EAAE,CAC3DvB,SAAS,CAACqB,OAAO,CAAC,CAElB;AACA3F,iBAAiB,CAACmF,KAAK,CAACC,IAAI,CAAC,CAAC,CAC9BpF,iBAAiB,CAACmF,KAAK,CAACE,KAAK,CAAC,CAAC,CAE/B;AACA,GAAIlD,IAAI,CAACmD,OAAO,CAAE,CAChBd,WAAW,CAACxE,iBAAiB,CAAC,CAC5BuF,QAAQ,CAAExF,SAAS,CAACoF,KAAK,CAACK,MAAM,CAACrD,IAAI,CAACmD,OAAO,CAC/C,CAAC,CAAC,CACFd,WAAW,CAACxE,iBAAiB,CAAC,CAC5BuF,QAAQ,CAAExF,SAAS,CAACoF,KAAK,CAACM,IAAI,CAACtD,IAAI,CAACmD,OAAO,CAC7C,CAAC,CAAC,CACJ,CACA,MAEF,IAAK,gBAAgB,CACnB;AACAf,WAAW,CAAC,mBAAmBpC,IAAI,CAAC2D,WAAW,EAAI3D,IAAI,CAACmD,OAAO,EAAE,CAAC,CAElE;AACAtF,iBAAiB,CAACmF,KAAK,CAACC,IAAI,CAAC,CAAC,CAC9BpF,iBAAiB,CAACmF,KAAK,CAACE,KAAK,CAAC,CAAC,CAE/B,GAAIlD,IAAI,CAACmD,OAAO,CAAE,CAChBd,WAAW,CAACxE,iBAAiB,CAAC,CAC5BuF,QAAQ,CAAExF,SAAS,CAACoF,KAAK,CAACK,MAAM,CAACrD,IAAI,CAACmD,OAAO,CAC/C,CAAC,CAAC,CACFd,WAAW,CAACxE,iBAAiB,CAAC,CAC5BuF,QAAQ,CAAExF,SAAS,CAACoF,KAAK,CAACM,IAAI,CAACtD,IAAI,CAACmD,OAAO,CAC7C,CAAC,CAAC,CACJ,CACA,MAEF,IAAK,cAAc,CACjB;AACA,GAAInD,IAAI,CAACmD,OAAO,CAAE,CAChBd,WAAW,CAACuB,aAAa,CAAC,CACxBR,QAAQ,CAAExF,SAAS,CAACoF,KAAK,CAACK,MAAM,CAACrD,IAAI,CAACmD,OAAO,CAC/C,CAAC,CAAC,CACFd,WAAW,CAACuB,aAAa,CAAC,CACxBR,QAAQ,CAAExF,SAAS,CAACoF,KAAK,CAACM,IAAI,CAACtD,IAAI,CAACmD,OAAO,CAC7C,CAAC,CAAC,CACJ,CAEA;AACAtF,iBAAiB,CAACmF,KAAK,CAACC,IAAI,CAAC,CAAC,CAC9BpF,iBAAiB,CAACmF,KAAK,CAACE,KAAK,CAAC,CAAC,CAC/B,MAEF,IAAK,iBAAiB,CACpB;AACA;AACA,MAEF,IAAK,gBAAgB,CACnB;AAEA;AACA;AAEA;AACA,GAAIlD,IAAI,CAACmD,OAAO,CAAE,CAChBd,WAAW,CAACxE,iBAAiB,CAAC,CAC5BuF,QAAQ,CAAExF,SAAS,CAACoF,KAAK,CAACK,MAAM,CAACrD,IAAI,CAACmD,OAAO,CAC/C,CAAC,CAAC,CACFd,WAAW,CAACxE,iBAAiB,CAAC,CAC5BuF,QAAQ,CAAExF,SAAS,CAACoF,KAAK,CAACM,IAAI,CAACtD,IAAI,CAACmD,OAAO,CAC7C,CAAC,CAAC,CACJ,CACA,MACJ,CACF,CAAC,CAED;AACA3F,SAAS,CAAC,IAAM,CACd,GAAI0E,eAAe,CAAC,CAAC,EAAID,IAAI,CAAE,CAC7B,KAAM,CAAAlD,KAAK,CAAG8E,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAI,kBAAkB,CACjE/B,kBAAkB,CAAC,CAAElC,SAAS,CAAE,KAAK,CAAEmC,UAAU,CAAE,IAAI,CAAE7B,KAAK,CAAE,IAAK,CAAC,CAAC,CAEvE;AACAmC,eAAe,CAACyB,OAAO,CAAGrC,SAAS,CAACT,SAAS,CAC3C,aAAa,CACb6B,sBACF,CAAC,CAED;AACApB,SAAS,CAAC7C,OAAO,CAAC0D,eAAe,CAAC,CAAC,CAAExD,KAAK,CAAC,CACxCiF,IAAI,CAAC,IAAM,CACZ,CAAC,CAAC,CACDnD,KAAK,CAACV,KAAK,EAAI,CACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD4B,kBAAkB,CAAC,CAAElC,SAAS,CAAE,KAAK,CAAEmC,UAAU,CAAE,KAAK,CAAE7B,KAAM,CAAC,CAAC,CACpE,CAAC,CAAC,CACN,CAAC,IAAM,CACL;AACA,GAAImC,eAAe,CAACyB,OAAO,CAAE,CAC3BzB,eAAe,CAACyB,OAAO,CAAC,CAAC,CACzBzB,eAAe,CAACyB,OAAO,CAAG,IAAI,CAChC,CACArC,SAAS,CAACZ,UAAU,CAAC,CAAC,CACtBiB,kBAAkB,CAAC,CAAElC,SAAS,CAAE,KAAK,CAAEmC,UAAU,CAAE,KAAK,CAAE7B,KAAK,CAAE,IAAK,CAAC,CAAC,CAC1E,CAEA;AACA,MAAO,IAAM,CACX,GAAImC,eAAe,CAACyB,OAAO,CAAE,CAC3BzB,eAAe,CAACyB,OAAO,CAAC,CAAC,CAC3B,CACF,CAAC,CACH,CAAC,CAAE,CAAC7B,eAAe,CAAC,CAAC,CAAED,IAAI,CAAC,CAAC,CAE7B;AACA,KAAM,CAAAgC,YAAY,CAAG,CACnB;AACA,GAAGnC,eAAe,CAElB;AACAN,IAAI,CAAGxB,IAAI,EAAK0B,SAAS,CAACF,IAAI,CAACxB,IAAI,CAAC,CACpCkE,SAAS,CAAEA,CAAA,GAAM,CACf,GAAIhC,eAAe,CAAC,CAAC,EAAID,IAAI,CAAE,CAC7B,KAAM,CAAAlD,KAAK,CAAG8E,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAI,kBAAkB,CACjE,MAAO,CAAApC,SAAS,CAAC7C,OAAO,CAAC0D,eAAe,CAAC,CAAC,CAAExD,KAAK,CAAC,CACpD,CACF,CAAC,CAED;AACAkC,SAAS,CAAGE,QAAQ,EAAKO,SAAS,CAACT,SAAS,CAAC,cAAckD,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAE,CAAC/C,IAAI,CAAErB,IAAI,GAAK,CACvF;AACA;AACA,GAAIqB,IAAI,GAAK,SAAS,CAAE,CACtBF,QAAQ,CAACnB,IAAI,CAAC,CAChB,CAAC,IAAM,CACLmB,QAAQ,CAACE,IAAI,CAAC,CAChB,CACF,CAAC,CACH,CAAC,CAED,mBACEpD,IAAA,CAACC,gBAAgB,CAACmG,QAAQ,EAACC,KAAK,CAAEL,YAAa,CAAApC,QAAA,CAC5CA,QAAQ,CACgB,CAAC,CAEhC,CAAC,CAED;AACA,MAAO,MAAM,CAAA0C,YAAY,CAAGA,CAAA,GAAM,CAChC,KAAM,CAAAC,OAAO,CAAGjH,UAAU,CAACW,gBAAgB,CAAC,CAC5C,GAAI,CAACsG,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,sDAAsD,CAAC,CACzE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAED,cAAe,CAAAtG,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}