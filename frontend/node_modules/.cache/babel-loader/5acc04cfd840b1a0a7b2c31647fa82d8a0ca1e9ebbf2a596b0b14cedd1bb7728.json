{"ast":null,"code":"// Task API Hooks - Simplified replacement for complex TaskService hook\nimport{useQuery,useMutation,useQueryClient}from'@tanstack/react-query';import{queryKeys,invalidateQueries}from'../../lib/query-client';import apiClient from'../../services/unifiedApiClient';// Fetch tasks with pagination\nexport const useTasks=function(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const{page=1,pageSize=10,topLevelOnly=true,...queryOptions}=options;return useQuery({queryKey:queryKeys.tasks.list({page,pageSize,topLevelOnly}),queryFn:async()=>{const params=new URLSearchParams({page:page.toString(),page_size:pageSize.toString()});if(topLevelOnly){params.append('top_level_only','true');}const response=await apiClient.get(`/tasks?${params.toString()}`);// Normalize response structure\nif(response&&typeof response==='object'){if(response.tasks&&Array.isArray(response.tasks)){return{items:response.tasks,total:response.total||response.tasks.length,page:response.page||page,pageSize:response.page_size||pageSize,totalPages:Math.ceil((response.total||response.tasks.length)/pageSize)};}else if(response.task_id){// Single task response\nreturn{items:[response],total:1,page:1,pageSize:1,totalPages:1};}}else if(Array.isArray(response)){// Legacy array response\nreturn{items:response,total:response.length,page:1,pageSize:response.length,totalPages:1};}// Fallback empty response\nreturn{items:[],total:0,page:1,pageSize:pageSize,totalPages:0};},...queryOptions});};// Fetch single task\nexport const useTask=function(taskId){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return useQuery({queryKey:queryKeys.tasks.detail(taskId),queryFn:async()=>{if(!taskId)return null;return await apiClient.get(`/tasks/${taskId}`);},enabled:!!taskId,...options});};// Fetch task tree\nexport const useTaskTree=function(taskId){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return useQuery({queryKey:queryKeys.tasks.tree(taskId),queryFn:async()=>{if(!taskId)return null;const response=await apiClient.get(`/tasks/${taskId}/tree`);// Validate response\nif(!response||!response.task_id){throw new Error('Invalid task tree data received');}return response;},enabled:!!taskId,staleTime:2*60*1000,// Task trees are more stable, cache for 2 minutes\n...options});};// Fetch task statistics\nexport const useTaskStats=function(){let topLevelOnly=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return useQuery({queryKey:queryKeys.tasks.stats(),queryFn:async()=>{const params=new URLSearchParams();params.append('top_level_only',topLevelOnly.toString());const response=await apiClient.get(`/tasks/stats?${params.toString()}`);return{total:response.total||0,completed:response.completed||0,inProgress:response.in_progress||0,pending:response.pending||0};},staleTime:30*1000,// Stats change frequently, cache for 30 seconds\n...options});};// Create task mutation\nexport const useCreateTask=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:async taskData=>{return await apiClient.post('/tasks',taskData);},onSuccess:()=>{// Invalidate and refetch tasks list and stats\ninvalidateQueries.tasks.list();invalidateQueries.tasks.stats();},onError:error=>{console.error('Failed to create task:',error);}});};// Update task mutation\nexport const useUpdateTask=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:async _ref=>{let{taskId,updates}=_ref;return await apiClient.patch(`/tasks/${taskId}`,updates);},onSuccess:(data,_ref2)=>{let{taskId}=_ref2;// Update the specific task in cache\nqueryClient.setQueryData(queryKeys.tasks.detail(taskId),data);// Invalidate related queries\ninvalidateQueries.tasks.list();invalidateQueries.tasks.tree(taskId);invalidateQueries.tasks.stats();},onError:error=>{console.error('Failed to update task:',error);}});};// Complete task mutation\nexport const useCompleteTask=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:async taskId=>{return await apiClient.post(`/tasks/${taskId}/complete`);},onSuccess:(data,taskId)=>{// Update task status in cache\nqueryClient.setQueryData(queryKeys.tasks.detail(taskId),oldData=>oldData?{...oldData,status:'completed'}:oldData);// Invalidate related queries\ninvalidateQueries.tasks.list();invalidateQueries.tasks.tree(taskId);invalidateQueries.tasks.stats();},onError:error=>{console.error('Failed to complete task:',error);}});};// Delete task mutation\nexport const useDeleteTask=()=>{const queryClient=useQueryClient();return useMutation({mutationFn:async taskId=>{return await apiClient.deleteTask(taskId);},onSuccess:(data,taskId)=>{// Remove task from cache\nqueryClient.removeQueries({queryKey:queryKeys.tasks.detail(taskId)});queryClient.removeQueries({queryKey:queryKeys.tasks.tree(taskId)});// Invalidate related queries\ninvalidateQueries.tasks.list();invalidateQueries.tasks.stats();},onError:error=>{console.error('Failed to delete task:',error);}});};","map":{"version":3,"names":["useQuery","useMutation","useQueryClient","queryKeys","invalidateQueries","apiClient","useTasks","options","arguments","length","undefined","page","pageSize","topLevelOnly","queryOptions","queryKey","tasks","list","queryFn","params","URLSearchParams","toString","page_size","append","response","get","Array","isArray","items","total","totalPages","Math","ceil","task_id","useTask","taskId","detail","enabled","useTaskTree","tree","Error","staleTime","useTaskStats","stats","completed","inProgress","in_progress","pending","useCreateTask","queryClient","mutationFn","taskData","post","onSuccess","onError","error","console","useUpdateTask","_ref","updates","patch","data","_ref2","setQueryData","useCompleteTask","oldData","status","useDeleteTask","deleteTask","removeQueries"],"sources":["/app/src/hooks/api/useTasks.js"],"sourcesContent":["// Task API Hooks - Simplified replacement for complex TaskService hook\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { queryKeys, invalidateQueries } from '../../lib/query-client';\nimport apiClient from '../../services/unifiedApiClient';\n\n// Fetch tasks with pagination\nexport const useTasks = (options = {}) => {\n  const {\n    page = 1,\n    pageSize = 10,\n    topLevelOnly = true,\n    ...queryOptions\n  } = options;\n\n  return useQuery({\n    queryKey: queryKeys.tasks.list({ page, pageSize, topLevelOnly }),\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        page_size: pageSize.toString(),\n      });\n      \n      if (topLevelOnly) {\n        params.append('top_level_only', 'true');\n      }\n\n      const response = await apiClient.get(`/tasks?${params.toString()}`);\n      \n      // Normalize response structure\n      if (response && typeof response === 'object') {\n        if (response.tasks && Array.isArray(response.tasks)) {\n          return {\n            items: response.tasks,\n            total: response.total || response.tasks.length,\n            page: response.page || page,\n            pageSize: response.page_size || pageSize,\n            totalPages: Math.ceil((response.total || response.tasks.length) / pageSize),\n          };\n        } else if (response.task_id) {\n          // Single task response\n          return {\n            items: [response],\n            total: 1,\n            page: 1,\n            pageSize: 1,\n            totalPages: 1,\n          };\n        }\n      } else if (Array.isArray(response)) {\n        // Legacy array response\n        return {\n          items: response,\n          total: response.length,\n          page: 1,\n          pageSize: response.length,\n          totalPages: 1,\n        };\n      }\n\n      // Fallback empty response\n      return {\n        items: [],\n        total: 0,\n        page: 1,\n        pageSize: pageSize,\n        totalPages: 0,\n      };\n    },\n    ...queryOptions,\n  });\n};\n\n// Fetch single task\nexport const useTask = (taskId, options = {}) => {\n  return useQuery({\n    queryKey: queryKeys.tasks.detail(taskId),\n    queryFn: async () => {\n      if (!taskId) return null;\n      return await apiClient.get(`/tasks/${taskId}`);\n    },\n    enabled: !!taskId,\n    ...options,\n  });\n};\n\n// Fetch task tree\nexport const useTaskTree = (taskId, options = {}) => {\n  return useQuery({\n    queryKey: queryKeys.tasks.tree(taskId),\n    queryFn: async () => {\n      if (!taskId) return null;\n      \n      const response = await apiClient.get(`/tasks/${taskId}/tree`);\n      \n      // Validate response\n      if (!response || !response.task_id) {\n        throw new Error('Invalid task tree data received');\n      }\n      \n      return response;\n    },\n    enabled: !!taskId,\n    staleTime: 2 * 60 * 1000, // Task trees are more stable, cache for 2 minutes\n    ...options,\n  });\n};\n\n// Fetch task statistics\nexport const useTaskStats = (topLevelOnly = true, options = {}) => {\n  return useQuery({\n    queryKey: queryKeys.tasks.stats(),\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      params.append('top_level_only', topLevelOnly.toString());\n      \n      const response = await apiClient.get(`/tasks/stats?${params.toString()}`);\n      \n      return {\n        total: response.total || 0,\n        completed: response.completed || 0,\n        inProgress: response.in_progress || 0,\n        pending: response.pending || 0,\n      };\n    },\n    staleTime: 30 * 1000, // Stats change frequently, cache for 30 seconds\n    ...options,\n  });\n};\n\n// Create task mutation\nexport const useCreateTask = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (taskData) => {\n      return await apiClient.post('/tasks', taskData);\n    },\n    onSuccess: () => {\n      // Invalidate and refetch tasks list and stats\n      invalidateQueries.tasks.list();\n      invalidateQueries.tasks.stats();\n    },\n    onError: (error) => {\n      console.error('Failed to create task:', error);\n    },\n  });\n};\n\n// Update task mutation\nexport const useUpdateTask = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ taskId, updates }) => {\n      return await apiClient.patch(`/tasks/${taskId}`, updates);\n    },\n    onSuccess: (data, { taskId }) => {\n      // Update the specific task in cache\n      queryClient.setQueryData(queryKeys.tasks.detail(taskId), data);\n      \n      // Invalidate related queries\n      invalidateQueries.tasks.list();\n      invalidateQueries.tasks.tree(taskId);\n      invalidateQueries.tasks.stats();\n    },\n    onError: (error) => {\n      console.error('Failed to update task:', error);\n    },\n  });\n};\n\n// Complete task mutation\nexport const useCompleteTask = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (taskId) => {\n      return await apiClient.post(`/tasks/${taskId}/complete`);\n    },\n    onSuccess: (data, taskId) => {\n      // Update task status in cache\n      queryClient.setQueryData(queryKeys.tasks.detail(taskId), (oldData) => \n        oldData ? { ...oldData, status: 'completed' } : oldData\n      );\n      \n      // Invalidate related queries\n      invalidateQueries.tasks.list();\n      invalidateQueries.tasks.tree(taskId);\n      invalidateQueries.tasks.stats();\n    },\n    onError: (error) => {\n      console.error('Failed to complete task:', error);\n    },\n  });\n};\n\n// Delete task mutation\nexport const useDeleteTask = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (taskId) => {\n      return await apiClient.deleteTask(taskId);\n    },\n    onSuccess: (data, taskId) => {\n      // Remove task from cache\n      queryClient.removeQueries({ queryKey: queryKeys.tasks.detail(taskId) });\n      queryClient.removeQueries({ queryKey: queryKeys.tasks.tree(taskId) });\n      \n      // Invalidate related queries\n      invalidateQueries.tasks.list();\n      invalidateQueries.tasks.stats();\n    },\n    onError: (error) => {\n      console.error('Failed to delete task:', error);\n    },\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}