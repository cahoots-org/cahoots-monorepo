{"ast":null,"code":"/**\n * Centralized error handling service for API operations\n *//**\n * Standard error response format\n */export const ErrorTypes={NETWORK:'NETWORK_ERROR',AUTHENTICATION:'AUTH_ERROR',AUTHORIZATION:'PERMISSION_ERROR',VALIDATION:'VALIDATION_ERROR',NOT_FOUND:'NOT_FOUND',SERVER:'SERVER_ERROR',UNKNOWN:'UNKNOWN_ERROR'};/**\n * Extract error information from API response\n */export const parseApiError=error=>{if(!error.response){return{type:ErrorTypes.NETWORK,message:'Network connection failed. Please check your internet connection.',details:error.message,status:null};}const{status,data}=error.response;let type=ErrorTypes.UNKNOWN;let message='An unexpected error occurred. Please try again.';switch(status){case 400:type=ErrorTypes.VALIDATION;message=(data===null||data===void 0?void 0:data.detail)||'Invalid request. Please check your input.';break;case 401:type=ErrorTypes.AUTHENTICATION;message='Authentication required. Please log in again.';break;case 403:type=ErrorTypes.AUTHORIZATION;message='You do not have permission to perform this action.';break;case 404:type=ErrorTypes.NOT_FOUND;message=(data===null||data===void 0?void 0:data.detail)||'The requested resource was not found.';break;case 422:type=ErrorTypes.VALIDATION;message=(data===null||data===void 0?void 0:data.detail)||'Validation failed. Please check your input.';break;case 500:type=ErrorTypes.SERVER;message='Server error. Please try again later.';break;default:if(status>=500){type=ErrorTypes.SERVER;message='Server error. Please try again later.';}}return{type,message,details:(data===null||data===void 0?void 0:data.detail)||(data===null||data===void 0?void 0:data.message),status,validationErrors:(data===null||data===void 0?void 0:data.errors)||null};};/**\n * Display error to user based on error type\n */export const handleApiError=function(error){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{showAlert=true,customMessages={},onAuthError=null,onValidationError=null}=options;const parsedError=parseApiError(error);const displayMessage=customMessages[parsedError.type]||parsedError.message;// Log error for debugging\nconsole.error('API Error:',{type:parsedError.type,status:parsedError.status,message:parsedError.message,details:parsedError.details,originalError:error});// Handle specific error types\nswitch(parsedError.type){case ErrorTypes.AUTHENTICATION:if(onAuthError){onAuthError(parsedError);}else{// Clear local storage and redirect to login\nlocalStorage.removeItem('token');localStorage.removeItem('user');// Use React Router for safe navigation\nif(window.location.pathname!=='/login'){window.location.href='/login';}}break;case ErrorTypes.VALIDATION:if(onValidationError){onValidationError(parsedError);}break;}// Log error for debugging (alert removed - components should handle user notifications)\nif(showAlert&&parsedError.type!==ErrorTypes.AUTHENTICATION){console.error('User Error:',displayMessage);// Note: Components using withErrorHandling should implement their own toast notifications\n// for user-facing error display. This service focuses on error parsing and logging.\n}return parsedError;};/**\n * Wrapper for API calls with standardized error handling\n */export const withErrorHandling=async function(apiCall){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const response=await apiCall();return{data:response.data,error:null};}catch(error){const parsedError=handleApiError(error,options);return{data:null,error:parsedError};}};/**\n * Format validation errors for display\n */export const formatValidationErrors=validationErrors=>{if(!validationErrors||!Array.isArray(validationErrors)){return'';}return validationErrors.map(err=>`${err.field}: ${err.message}`).join('\\n');};","map":{"version":3,"names":["ErrorTypes","NETWORK","AUTHENTICATION","AUTHORIZATION","VALIDATION","NOT_FOUND","SERVER","UNKNOWN","parseApiError","error","response","type","message","details","status","data","detail","validationErrors","errors","handleApiError","options","arguments","length","undefined","showAlert","customMessages","onAuthError","onValidationError","parsedError","displayMessage","console","originalError","localStorage","removeItem","window","location","pathname","href","withErrorHandling","apiCall","formatValidationErrors","Array","isArray","map","err","field","join"],"sources":["/app/src/services/errorHandler.js"],"sourcesContent":["/**\n * Centralized error handling service for API operations\n */\n\n/**\n * Standard error response format\n */\nexport const ErrorTypes = {\n  NETWORK: 'NETWORK_ERROR',\n  AUTHENTICATION: 'AUTH_ERROR', \n  AUTHORIZATION: 'PERMISSION_ERROR',\n  VALIDATION: 'VALIDATION_ERROR',\n  NOT_FOUND: 'NOT_FOUND',\n  SERVER: 'SERVER_ERROR',\n  UNKNOWN: 'UNKNOWN_ERROR'\n};\n\n/**\n * Extract error information from API response\n */\nexport const parseApiError = (error) => {\n  if (!error.response) {\n    return {\n      type: ErrorTypes.NETWORK,\n      message: 'Network connection failed. Please check your internet connection.',\n      details: error.message,\n      status: null\n    };\n  }\n\n  const { status, data } = error.response;\n  let type = ErrorTypes.UNKNOWN;\n  let message = 'An unexpected error occurred. Please try again.';\n\n  switch (status) {\n    case 400:\n      type = ErrorTypes.VALIDATION;\n      message = data?.detail || 'Invalid request. Please check your input.';\n      break;\n    case 401:\n      type = ErrorTypes.AUTHENTICATION;\n      message = 'Authentication required. Please log in again.';\n      break;\n    case 403:\n      type = ErrorTypes.AUTHORIZATION;\n      message = 'You do not have permission to perform this action.';\n      break;\n    case 404:\n      type = ErrorTypes.NOT_FOUND;\n      message = data?.detail || 'The requested resource was not found.';\n      break;\n    case 422:\n      type = ErrorTypes.VALIDATION;\n      message = data?.detail || 'Validation failed. Please check your input.';\n      break;\n    case 500:\n      type = ErrorTypes.SERVER;\n      message = 'Server error. Please try again later.';\n      break;\n    default:\n      if (status >= 500) {\n        type = ErrorTypes.SERVER;\n        message = 'Server error. Please try again later.';\n      }\n  }\n\n  return {\n    type,\n    message,\n    details: data?.detail || data?.message,\n    status,\n    validationErrors: data?.errors || null\n  };\n};\n\n/**\n * Display error to user based on error type\n */\nexport const handleApiError = (error, options = {}) => {\n  const { \n    showAlert = true, \n    customMessages = {}, \n    onAuthError = null,\n    onValidationError = null \n  } = options;\n\n  const parsedError = parseApiError(error);\n  const displayMessage = customMessages[parsedError.type] || parsedError.message;\n\n  // Log error for debugging\n  console.error('API Error:', {\n    type: parsedError.type,\n    status: parsedError.status,\n    message: parsedError.message,\n    details: parsedError.details,\n    originalError: error\n  });\n\n  // Handle specific error types\n  switch (parsedError.type) {\n    case ErrorTypes.AUTHENTICATION:\n      if (onAuthError) {\n        onAuthError(parsedError);\n      } else {\n        // Clear local storage and redirect to login\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        // Use React Router for safe navigation\n        if (window.location.pathname !== '/login') {\n          window.location.href = '/login';\n        }\n      }\n      break;\n    \n    case ErrorTypes.VALIDATION:\n      if (onValidationError) {\n        onValidationError(parsedError);\n      }\n      break;\n  }\n\n  // Log error for debugging (alert removed - components should handle user notifications)\n  if (showAlert && parsedError.type !== ErrorTypes.AUTHENTICATION) {\n    console.error('User Error:', displayMessage);\n    // Note: Components using withErrorHandling should implement their own toast notifications\n    // for user-facing error display. This service focuses on error parsing and logging.\n  }\n\n  return parsedError;\n};\n\n/**\n * Wrapper for API calls with standardized error handling\n */\nexport const withErrorHandling = async (apiCall, options = {}) => {\n  try {\n    const response = await apiCall();\n    return { data: response.data, error: null };\n  } catch (error) {\n    const parsedError = handleApiError(error, options);\n    return { data: null, error: parsedError };\n  }\n};\n\n/**\n * Format validation errors for display\n */\nexport const formatValidationErrors = (validationErrors) => {\n  if (!validationErrors || !Array.isArray(validationErrors)) {\n    return '';\n  }\n\n  return validationErrors\n    .map(err => `${err.field}: ${err.message}`)\n    .join('\\n');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}