{"ast":null,"code":"// Decomposition Status - Real-time feedback during task decomposition\nimport React,{useState,useEffect}from'react';import{useWebSocket}from'../contexts/WebSocketContext';import{Card,Text,Badge,Progress,LoadingSpinner,CheckIcon,ClockIcon,CogIcon,ExclamationCircleIcon,tokens}from'../design-system';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DecompositionStatus=_ref=>{let{taskId,isDecomposing,onDecompositionComplete}=_ref;const{connected,subscribe}=useWebSocket();const[decompositionSteps,setDecompositionSteps]=useState([]);const[currentStep,setCurrentStep]=useState('');const[progress,setProgress]=useState(0);const[error,setError]=useState(null);const stageLabels={source:'Source Processing',context_fetch:'Context Analysis',complexity_scorer:'Complexity Analysis',root_processor:'Technical Planning',decomposer:'Task Decomposition',composer:'Final Composition'};const getProgressForStage=stage=>{const stageProgress={source:10,context_fetch:25,complexity_scorer:40,root_processor:55,decomposer:75,composer:90};return stageProgress[stage]||0;};const handleDecompositionEvent=event=>{var _event$task;switch(event.type){// Handle real-time service status events\ncase'service.status':if(event.task_id===taskId){const{stage,status,message,timestamp}=event;const stepTitle=stageLabels[stage]||stage;const stepId=`${stage}-${status}`;// Update current step and progress\nsetCurrentStep(message);if(status==='started'){setProgress(getProgressForStage(stage));// Add or update the step\nconst existingStepIndex=decompositionSteps.findIndex(s=>s.id.startsWith(stage));if(existingStepIndex>=0){updateStep(stepTitle,'in_progress',message);}else{addStep(stepTitle,'in_progress',message);}}else if(status==='processing'){setCurrentStep(message);updateStepDescription(stepTitle,message);}else if(status==='completed'){updateStep(stepTitle,'completed',message);setProgress(getProgressForStage(stage)+10);}else if(status==='error'){updateStep(stepTitle,'error',message);setError(message);}}break;// Handle task completion\ncase'task.updated':if(event.task_id===taskId&&((_event$task=event.task)===null||_event$task===void 0?void 0:_event$task.status)==='completed'){setCurrentStep('Task processing completed successfully!');setProgress(100);setTimeout(()=>{if(onDecompositionComplete){onDecompositionComplete();}},2000);}break;// Handle task decomposition completed\ncase'task.decomposed':if(event.task_id===taskId){setCurrentStep('Task decomposed into subtasks successfully!');setProgress(100);setTimeout(()=>{if(onDecompositionComplete){onDecompositionComplete();}},2000);}break;default:break;}};useEffect(()=>{if(taskId&&connected){const unsubscribe=subscribe(event=>{var _event$task2;// Listen to events for this task or its subtasks\nif(event.task_id===taskId||((_event$task2=event.task)===null||_event$task2===void 0?void 0:_event$task2.parent_id)===taskId){handleDecompositionEvent(event);}});return unsubscribe;}},[taskId,connected,subscribe,handleDecompositionEvent]);// Fallback: If decomposing but no progress after 5 seconds, simulate progress\nuseEffect(()=>{if(isDecomposing&&progress===0&&decompositionSteps.length===0){const timer=setTimeout(()=>{if(progress===0){setCurrentStep('AI is analyzing your task...');setProgress(15);addStep('Task Analysis','in_progress','Breaking down the task requirements');}},5000);return()=>clearTimeout(timer);}},[isDecomposing,progress,decompositionSteps.length]);const addStep=(title,status,description)=>{setDecompositionSteps(prev=>[...prev,{id:title.toLowerCase().replace(/\\s+/g,'-'),title,status,description,timestamp:new Date().toLocaleTimeString()}]);};const updateStep=(title,status,description)=>{setDecompositionSteps(prev=>prev.map(step=>step.title===title?{...step,status,description:description||step.description,timestamp:new Date().toLocaleTimeString()}:step));};const updateStepDescription=(title,description)=>{setDecompositionSteps(prev=>prev.map(step=>step.title===title?{...step,description}:step));};const getStepIcon=status=>{switch(status){case'completed':return CheckIcon;case'in_progress':return CogIcon;case'error':return ExclamationCircleIcon;default:return ClockIcon;}};const getStepColor=status=>{switch(status){case'completed':return tokens.colors.success[500];case'in_progress':return tokens.colors.primary[500];case'error':return tokens.colors.error[500];default:return tokens.colors.dark.muted;}};// Show component only if actively decomposing OR if there's an error\n// Hide the component if decomposition is complete (not decomposing and no error)\nif(!isDecomposing&&!error){return null;}// If decomposing but no steps yet, show waiting message\n// But don't show the waiting state if we're not actually decomposing (prevents showing after page refresh)\nconst showWaitingState=isDecomposing&&decompositionSteps.length===0&&!currentStep;return/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(\"div\",{style:{padding:tokens.spacing[1]},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',justifyContent:'space-between',marginBottom:tokens.spacing[4]},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:tokens.spacing[3]},children:[isDecomposing&&/*#__PURE__*/_jsx(LoadingSpinner,{size:\"sm\"}),/*#__PURE__*/_jsx(Text,{style:{fontSize:tokens.typography.fontSize.lg[0],fontWeight:tokens.typography.fontWeight.semibold,color:tokens.colors.dark.text,margin:0},children:isDecomposing?'Decomposing Task':'Decomposition Complete'})]}),/*#__PURE__*/_jsx(Badge,{variant:error?'danger':isDecomposing?'info':'success',children:error?'Failed':isDecomposing?'Running':'Complete'})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:tokens.spacing[4]},children:[/*#__PURE__*/_jsx(Text,{style:{fontSize:tokens.typography.fontSize.sm[0],color:tokens.colors.dark.muted,margin:0,marginBottom:tokens.spacing[2]},children:showWaitingState?'Waiting for AI to start decomposition...':currentStep}),/*#__PURE__*/_jsx(Progress,{value:showWaitingState?10:progress,variant:showWaitingState?'info':error?'error':'primary'}),showWaitingState&&/*#__PURE__*/_jsx(Text,{style:{fontSize:tokens.typography.fontSize.xs[0],color:tokens.colors.dark.muted,margin:0,marginTop:tokens.spacing[1],fontStyle:'italic'},children:\"The AI is analyzing your task and will start creating subtasks shortly...\"})]}),error&&/*#__PURE__*/_jsx(\"div\",{style:{padding:tokens.spacing[3],backgroundColor:`${tokens.colors.error[500]}10`,border:`1px solid ${tokens.colors.error[500]}30`,borderRadius:tokens.borderRadius.md,marginBottom:tokens.spacing[4]},children:/*#__PURE__*/_jsx(Text,{style:{color:tokens.colors.error[500],fontSize:tokens.typography.fontSize.sm[0],margin:0},children:error})}),decompositionSteps.length>0&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Text,{style:{fontSize:tokens.typography.fontSize.sm[0],fontWeight:tokens.typography.fontWeight.semibold,color:tokens.colors.dark.text,margin:0,marginBottom:tokens.spacing[3]},children:\"Process Steps\"}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',flexDirection:'column',gap:tokens.spacing[2]},children:decompositionSteps.map((step,index)=>{const StepIcon=getStepIcon(step.status);return/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',padding:tokens.spacing[3],backgroundColor:tokens.colors.dark.surface,borderRadius:tokens.borderRadius.md,border:`1px solid ${tokens.colors.dark.border}`},children:[/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',alignItems:'center',marginRight:tokens.spacing[3]},children:step.status==='in_progress'?/*#__PURE__*/_jsx(LoadingSpinner,{size:\"xs\"}):/*#__PURE__*/_jsx(StepIcon,{size:16,style:{color:getStepColor(step.status)}})}),/*#__PURE__*/_jsxs(\"div\",{style:{flex:1},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',justifyContent:'space-between',marginBottom:tokens.spacing[1]},children:[/*#__PURE__*/_jsx(Text,{style:{fontSize:tokens.typography.fontSize.sm[0],fontWeight:tokens.typography.fontWeight.medium,color:tokens.colors.dark.text,margin:0},children:step.title}),/*#__PURE__*/_jsx(Text,{style:{fontSize:tokens.typography.fontSize.xs[0],color:tokens.colors.dark.muted,margin:0},children:step.timestamp})]}),/*#__PURE__*/_jsx(Text,{style:{fontSize:tokens.typography.fontSize.xs[0],color:tokens.colors.dark.muted,margin:0},children:step.description})]})]},step.id);})})]})]})});};export default DecompositionStatus;","map":{"version":3,"names":["React","useState","useEffect","useWebSocket","Card","Text","Badge","Progress","LoadingSpinner","CheckIcon","ClockIcon","CogIcon","ExclamationCircleIcon","tokens","jsx","_jsx","jsxs","_jsxs","DecompositionStatus","_ref","taskId","isDecomposing","onDecompositionComplete","connected","subscribe","decompositionSteps","setDecompositionSteps","currentStep","setCurrentStep","progress","setProgress","error","setError","stageLabels","source","context_fetch","complexity_scorer","root_processor","decomposer","composer","getProgressForStage","stage","stageProgress","handleDecompositionEvent","event","_event$task","type","task_id","status","message","timestamp","stepTitle","stepId","existingStepIndex","findIndex","s","id","startsWith","updateStep","addStep","updateStepDescription","task","setTimeout","unsubscribe","_event$task2","parent_id","length","timer","clearTimeout","title","description","prev","toLowerCase","replace","Date","toLocaleTimeString","map","step","getStepIcon","getStepColor","colors","success","primary","dark","muted","showWaitingState","children","style","padding","spacing","display","alignItems","justifyContent","marginBottom","gap","size","fontSize","typography","lg","fontWeight","semibold","color","text","margin","variant","sm","value","xs","marginTop","fontStyle","backgroundColor","border","borderRadius","md","flexDirection","index","StepIcon","surface","marginRight","flex","medium"],"sources":["/app/src/components/DecompositionStatus.js"],"sourcesContent":["// Decomposition Status - Real-time feedback during task decomposition\nimport React, { useState, useEffect } from 'react';\nimport { useWebSocket } from '../contexts/WebSocketContext';\nimport {\n  Card,\n  Text,\n  Badge,\n  Progress,\n  LoadingSpinner,\n  CheckIcon,\n  ClockIcon,\n  CogIcon,\n  ExclamationCircleIcon,\n  tokens,\n} from '../design-system';\n\nconst DecompositionStatus = ({ taskId, isDecomposing, onDecompositionComplete }) => {\n  const { connected, subscribe } = useWebSocket();\n  const [decompositionSteps, setDecompositionSteps] = useState([]);\n  const [currentStep, setCurrentStep] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n\n  const stageLabels = {\n    source: 'Source Processing',\n    context_fetch: 'Context Analysis',\n    complexity_scorer: 'Complexity Analysis',\n    root_processor: 'Technical Planning',\n    decomposer: 'Task Decomposition',\n    composer: 'Final Composition'\n  };\n\n  const getProgressForStage = (stage) => {\n    const stageProgress = {\n      source: 10,\n      context_fetch: 25,\n      complexity_scorer: 40,\n      root_processor: 55,\n      decomposer: 75,\n      composer: 90\n    };\n    return stageProgress[stage] || 0;\n  };\n\n  const handleDecompositionEvent = (event) => {\n    switch (event.type) {\n      // Handle real-time service status events\n      case 'service.status':\n        if (event.task_id === taskId) {\n          const { stage, status, message, timestamp } = event;\n          const stepTitle = stageLabels[stage] || stage;\n          const stepId = `${stage}-${status}`;\n          \n          // Update current step and progress\n          setCurrentStep(message);\n          \n          if (status === 'started') {\n            setProgress(getProgressForStage(stage));\n            // Add or update the step\n            const existingStepIndex = decompositionSteps.findIndex(s => s.id.startsWith(stage));\n            if (existingStepIndex >= 0) {\n              updateStep(stepTitle, 'in_progress', message);\n            } else {\n              addStep(stepTitle, 'in_progress', message);\n            }\n          } else if (status === 'processing') {\n            setCurrentStep(message);\n            updateStepDescription(stepTitle, message);\n          } else if (status === 'completed') {\n            updateStep(stepTitle, 'completed', message);\n            setProgress(getProgressForStage(stage) + 10);\n          } else if (status === 'error') {\n            updateStep(stepTitle, 'error', message);\n            setError(message);\n          }\n        }\n        break;\n\n      // Handle task completion\n      case 'task.updated':\n        if (event.task_id === taskId && event.task?.status === 'completed') {\n          setCurrentStep('Task processing completed successfully!');\n          setProgress(100);\n          setTimeout(() => {\n            if (onDecompositionComplete) {\n              onDecompositionComplete();\n            }\n          }, 2000);\n        }\n        break;\n        \n      // Handle task decomposition completed\n      case 'task.decomposed':\n        if (event.task_id === taskId) {\n          setCurrentStep('Task decomposed into subtasks successfully!');\n          setProgress(100);\n          setTimeout(() => {\n            if (onDecompositionComplete) {\n              onDecompositionComplete();\n            }\n          }, 2000);\n        }\n        break;\n        \n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    if (taskId && connected) {\n      const unsubscribe = subscribe((event) => {\n        // Listen to events for this task or its subtasks\n        if (event.task_id === taskId || event.task?.parent_id === taskId) {\n          handleDecompositionEvent(event);\n        }\n      });\n\n      return unsubscribe;\n    }\n  }, [taskId, connected, subscribe, handleDecompositionEvent]);\n\n  // Fallback: If decomposing but no progress after 5 seconds, simulate progress\n  useEffect(() => {\n    if (isDecomposing && progress === 0 && decompositionSteps.length === 0) {\n      const timer = setTimeout(() => {\n        if (progress === 0) {\n          setCurrentStep('AI is analyzing your task...');\n          setProgress(15);\n          addStep('Task Analysis', 'in_progress', 'Breaking down the task requirements');\n        }\n      }, 5000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [isDecomposing, progress, decompositionSteps.length]);\n\n  const addStep = (title, status, description) => {\n    setDecompositionSteps(prev => [...prev, {\n      id: title.toLowerCase().replace(/\\s+/g, '-'),\n      title,\n      status,\n      description,\n      timestamp: new Date().toLocaleTimeString(),\n    }]);\n  };\n\n  const updateStep = (title, status, description) => {\n    setDecompositionSteps(prev => \n      prev.map(step => \n        step.title === title \n          ? { ...step, status, description: description || step.description, timestamp: new Date().toLocaleTimeString() }\n          : step\n      )\n    );\n  };\n\n  const updateStepDescription = (title, description) => {\n    setDecompositionSteps(prev => \n      prev.map(step => \n        step.title === title \n          ? { ...step, description }\n          : step\n      )\n    );\n  };\n\n  const getStepIcon = (status) => {\n    switch (status) {\n      case 'completed':\n        return CheckIcon;\n      case 'in_progress':\n        return CogIcon;\n      case 'error':\n        return ExclamationCircleIcon;\n      default:\n        return ClockIcon;\n    }\n  };\n\n  const getStepColor = (status) => {\n    switch (status) {\n      case 'completed':\n        return tokens.colors.success[500];\n      case 'in_progress':\n        return tokens.colors.primary[500];\n      case 'error':\n        return tokens.colors.error[500];\n      default:\n        return tokens.colors.dark.muted;\n    }\n  };\n\n  // Show component only if actively decomposing OR if there's an error\n  // Hide the component if decomposition is complete (not decomposing and no error)\n  if (!isDecomposing && !error) {\n    return null;\n  }\n\n  // If decomposing but no steps yet, show waiting message\n  // But don't show the waiting state if we're not actually decomposing (prevents showing after page refresh)\n  const showWaitingState = isDecomposing && decompositionSteps.length === 0 && !currentStep;\n\n  return (\n    <Card>\n      <div style={{ padding: tokens.spacing[1] }}>\n        {/* Header */}\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          marginBottom: tokens.spacing[4],\n        }}>\n          <div style={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: tokens.spacing[3],\n          }}>\n            {isDecomposing && <LoadingSpinner size=\"sm\" />}\n            <Text style={{\n              fontSize: tokens.typography.fontSize.lg[0],\n              fontWeight: tokens.typography.fontWeight.semibold,\n              color: tokens.colors.dark.text,\n              margin: 0,\n            }}>\n              {isDecomposing ? 'Decomposing Task' : 'Decomposition Complete'}\n            </Text>\n          </div>\n          \n          <Badge variant={error ? 'danger' : isDecomposing ? 'info' : 'success'}>\n            {error ? 'Failed' : isDecomposing ? 'Running' : 'Complete'}\n          </Badge>\n        </div>\n\n        {/* Progress Bar */}\n        <div style={{ marginBottom: tokens.spacing[4] }}>\n          <Text style={{\n            fontSize: tokens.typography.fontSize.sm[0],\n            color: tokens.colors.dark.muted,\n            margin: 0,\n            marginBottom: tokens.spacing[2],\n          }}>\n            {showWaitingState ? 'Waiting for AI to start decomposition...' : currentStep}\n          </Text>\n          <Progress \n            value={showWaitingState ? 10 : progress}\n            variant={showWaitingState ? 'info' : (error ? 'error' : 'primary')}\n          />\n          {showWaitingState && (\n            <Text style={{\n              fontSize: tokens.typography.fontSize.xs[0],\n              color: tokens.colors.dark.muted,\n              margin: 0,\n              marginTop: tokens.spacing[1],\n              fontStyle: 'italic',\n            }}>\n              The AI is analyzing your task and will start creating subtasks shortly...\n            </Text>\n          )}\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div style={{\n            padding: tokens.spacing[3],\n            backgroundColor: `${tokens.colors.error[500]}10`,\n            border: `1px solid ${tokens.colors.error[500]}30`,\n            borderRadius: tokens.borderRadius.md,\n            marginBottom: tokens.spacing[4],\n          }}>\n            <Text style={{\n              color: tokens.colors.error[500],\n              fontSize: tokens.typography.fontSize.sm[0],\n              margin: 0,\n            }}>\n              {error}\n            </Text>\n          </div>\n        )}\n\n        {/* Step List */}\n        {decompositionSteps.length > 0 && (\n          <div>\n            <Text style={{\n              fontSize: tokens.typography.fontSize.sm[0],\n              fontWeight: tokens.typography.fontWeight.semibold,\n              color: tokens.colors.dark.text,\n              margin: 0,\n              marginBottom: tokens.spacing[3],\n            }}>\n              Process Steps\n            </Text>\n            \n            <div style={{\n              display: 'flex',\n              flexDirection: 'column',\n              gap: tokens.spacing[2],\n            }}>\n              {decompositionSteps.map((step, index) => {\n                const StepIcon = getStepIcon(step.status);\n                \n                return (\n                  <div\n                    key={step.id}\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      padding: tokens.spacing[3],\n                      backgroundColor: tokens.colors.dark.surface,\n                      borderRadius: tokens.borderRadius.md,\n                      border: `1px solid ${tokens.colors.dark.border}`,\n                    }}\n                  >\n                    <div style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      marginRight: tokens.spacing[3],\n                    }}>\n                      {step.status === 'in_progress' ? (\n                        <LoadingSpinner size=\"xs\" />\n                      ) : (\n                        <StepIcon \n                          size={16} \n                          style={{ color: getStepColor(step.status) }} \n                        />\n                      )}\n                    </div>\n                    \n                    <div style={{ flex: 1 }}>\n                      <div style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'space-between',\n                        marginBottom: tokens.spacing[1],\n                      }}>\n                        <Text style={{\n                          fontSize: tokens.typography.fontSize.sm[0],\n                          fontWeight: tokens.typography.fontWeight.medium,\n                          color: tokens.colors.dark.text,\n                          margin: 0,\n                        }}>\n                          {step.title}\n                        </Text>\n                        \n                        <Text style={{\n                          fontSize: tokens.typography.fontSize.xs[0],\n                          color: tokens.colors.dark.muted,\n                          margin: 0,\n                        }}>\n                          {step.timestamp}\n                        </Text>\n                      </div>\n                      \n                      <Text style={{\n                        fontSize: tokens.typography.fontSize.xs[0],\n                        color: tokens.colors.dark.muted,\n                        margin: 0,\n                      }}>\n                        {step.description}\n                      </Text>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n};\n\nexport default DecompositionStatus;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}