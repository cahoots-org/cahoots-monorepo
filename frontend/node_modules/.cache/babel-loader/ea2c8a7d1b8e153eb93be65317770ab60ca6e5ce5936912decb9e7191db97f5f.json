{"ast":null,"code":"import{useState,useEffect}from'react';import apiClient from'../services/unifiedApiClient';import{withErrorHandling}from'../services/errorHandler';import{LoadingTypes}from'../services/loadingService';import{logger}from'../utils/logger';export const useTaskData=(task,isOpen)=>{const[implementationDetails,setImplementationDetails]=useState('');const[storyPoints,setStoryPoints]=useState(1);const[projectStandards,setProjectStandards]=useState({});const[techStack,setTechStack]=useState({});const[isSaving,setIsSaving]=useState(false);const[isGenerating,setIsGenerating]=useState(false);// Simple operator status update (removed Recoil dependency)\nconst updateOperatorStatus=(taskId,operator,status,progress)=>{logger.debug(`Operator ${operator} status: ${status} (${progress}%)`);};// Initialize task details when task changes\nuseEffect(()=>{if(!isOpen||!task)return;logger.debug(`useTaskData: Loading task details for ${task.task_id}`);// Set initial values from task data\nsetImplementationDetails(task.implementation_details||'');setStoryPoints(task.story_points||1);// Extract project standards and tech stack from context\nconst context=task.context||{};const standards=context.project_standards||context.standards||{};const technologies=context.tech_stack||context.technologies||{};setProjectStandards(standards);setTechStack(technologies);// Auto-generate implementation details for atomic tasks without them\nconst isAtomic=task.is_atomic;const hasImplementationDetails=task.implementation_details&&task.implementation_details.trim().length>0;if(isAtomic&&!hasImplementationDetails){logger.debug('useTaskData: Atomic task detected without implementation details, generating them...');generateImplementationDetails();}},[isOpen,task]);// Generate implementation details\nconst generateImplementationDetails=async()=>{if(!task)return;setIsGenerating(true);updateOperatorStatus(task.task_id,'details_generator','processing',0);const{data,error}=await withErrorHandling(()=>apiClient.postWithLoading(`/tasks/${task.task_id}/generate-details`,{task_description:task.description,complexity_score:task.complexity_score||0},LoadingTypes.GENERATE_DETAILS),{customMessages:{SERVER_ERROR:'Failed to generate implementation details. Please try again.',NOT_FOUND:'Task not found. Please refresh and try again.',VALIDATION_ERROR:'Invalid task data. Please check the task details.'}});if(error){console.error('Failed to generate implementation details:',error);updateOperatorStatus(task.task_id,'details_generator','failed',0);throw error;}else{if(data&&data.implementation_details){setImplementationDetails(data.implementation_details);}if(data&&data.story_points){setStoryPoints(data.story_points);updateOperatorStatus(task.task_id,'details_generator','processing',50);}// Update the task with new details\nconst{error:updateError}=await withErrorHandling(()=>apiClient.patch(`/tasks/${task.task_id}`,{implementation_details:data.implementation_details||implementationDetails,story_points:data.story_points||storyPoints}),{customMessages:{SERVER_ERROR:'Failed to save generated details. Please try saving manually.'}});if(updateError){console.error('Failed to update task with generated details:',updateError);updateOperatorStatus(task.task_id,'details_generator','failed',0);}else{updateOperatorStatus(task.task_id,'details_generator','completed',100);}}setIsGenerating(false);};// Save task details\nconst handleSave=async()=>{if(!task)return{success:false};setIsSaving(true);try{// First, save the task details\nconst{data,error}=await withErrorHandling(()=>apiClient.patchWithLoading(`/tasks/${task.task_id}/details`,{implementation_details:implementationDetails,story_points:storyPoints},LoadingTypes.SAVE),{customMessages:{VALIDATION_ERROR:'Please check your task details and try again.',SERVER_ERROR:'Unable to save task details. Please try again later.'}});if(error){throw error;}// If the server adjusted the story points (to match Fibonacci), update our local state\nif(data&&data.story_points&&data.story_points!==storyPoints){logger.debug(`Server adjusted story points from ${storyPoints} to ${data.story_points}`);setStoryPoints(data.story_points);}// If the server generated implementation details for an atomic task, update our local state\nif(data&&data.implementation_details&&(!implementationDetails||implementationDetails.trim()==='')&&data.implementation_details.trim()!==''){logger.debug('Server generated implementation details for atomic task');setImplementationDetails(data.implementation_details);}return{success:true,adjustedStoryPoints:data===null||data===void 0?void 0:data.story_points,generatedDetails:data===null||data===void 0?void 0:data.implementation_details};}catch(err){logger.error('Error saving task details:',err);return{success:false,error:err};}finally{setIsSaving(false);}};return{implementationDetails,setImplementationDetails,storyPoints,setStoryPoints,projectStandards,techStack,isSaving,isGenerating,generateImplementationDetails,handleSave};};","map":{"version":3,"names":["useState","useEffect","apiClient","withErrorHandling","LoadingTypes","logger","useTaskData","task","isOpen","implementationDetails","setImplementationDetails","storyPoints","setStoryPoints","projectStandards","setProjectStandards","techStack","setTechStack","isSaving","setIsSaving","isGenerating","setIsGenerating","updateOperatorStatus","taskId","operator","status","progress","debug","task_id","implementation_details","story_points","context","standards","project_standards","technologies","tech_stack","isAtomic","is_atomic","hasImplementationDetails","trim","length","generateImplementationDetails","data","error","postWithLoading","task_description","description","complexity_score","GENERATE_DETAILS","customMessages","SERVER_ERROR","NOT_FOUND","VALIDATION_ERROR","console","updateError","patch","handleSave","success","patchWithLoading","SAVE","adjustedStoryPoints","generatedDetails","err"],"sources":["/app/src/hooks/useTaskData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport apiClient from '../services/unifiedApiClient';\nimport { withErrorHandling } from '../services/errorHandler';\nimport { LoadingTypes } from '../services/loadingService';\nimport { logger } from '../utils/logger';\n\nexport const useTaskData = (task, isOpen) => {\n  const [implementationDetails, setImplementationDetails] = useState('');\n  const [storyPoints, setStoryPoints] = useState(1);\n  const [projectStandards, setProjectStandards] = useState({});\n  const [techStack, setTechStack] = useState({});\n  const [isSaving, setIsSaving] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  \n  // Simple operator status update (removed Recoil dependency)\n  const updateOperatorStatus = (taskId, operator, status, progress) => {\n    logger.debug(`Operator ${operator} status: ${status} (${progress}%)`);\n  };\n\n  // Initialize task details when task changes\n  useEffect(() => {\n    if (!isOpen || !task) return;\n\n    logger.debug(`useTaskData: Loading task details for ${task.task_id}`);\n    \n    // Set initial values from task data\n    setImplementationDetails(task.implementation_details || '');\n    setStoryPoints(task.story_points || 1);\n    \n    // Extract project standards and tech stack from context\n    const context = task.context || {};\n    const standards = context.project_standards || context.standards || {};\n    const technologies = context.tech_stack || context.technologies || {};\n    \n    setProjectStandards(standards);\n    setTechStack(technologies);\n    \n    // Auto-generate implementation details for atomic tasks without them\n    const isAtomic = task.is_atomic;\n    const hasImplementationDetails = task.implementation_details && task.implementation_details.trim().length > 0;\n    \n    if (isAtomic && !hasImplementationDetails) {\n      logger.debug('useTaskData: Atomic task detected without implementation details, generating them...');\n      generateImplementationDetails();\n    }\n  }, [isOpen, task]);\n\n  // Generate implementation details\n  const generateImplementationDetails = async () => {\n    if (!task) return;\n    \n    setIsGenerating(true);\n    updateOperatorStatus(task.task_id, 'details_generator', 'processing', 0);\n    \n    const { data, error } = await withErrorHandling(\n      () => apiClient.postWithLoading(`/tasks/${task.task_id}/generate-details`, {\n        task_description: task.description,\n        complexity_score: task.complexity_score || 0\n      }, LoadingTypes.GENERATE_DETAILS),\n      {\n        customMessages: {\n          SERVER_ERROR: 'Failed to generate implementation details. Please try again.',\n          NOT_FOUND: 'Task not found. Please refresh and try again.',\n          VALIDATION_ERROR: 'Invalid task data. Please check the task details.'\n        }\n      }\n    );\n    \n    if (error) {\n      console.error('Failed to generate implementation details:', error);\n      updateOperatorStatus(task.task_id, 'details_generator', 'failed', 0);\n      throw error;\n    } else {\n      if (data && data.implementation_details) {\n        setImplementationDetails(data.implementation_details);\n      }\n      \n      if (data && data.story_points) {\n        setStoryPoints(data.story_points);\n        updateOperatorStatus(task.task_id, 'details_generator', 'processing', 50);\n      }\n      \n      // Update the task with new details\n      const { error: updateError } = await withErrorHandling(\n        () => apiClient.patch(`/tasks/${task.task_id}`, {\n          implementation_details: data.implementation_details || implementationDetails,\n          story_points: data.story_points || storyPoints\n        }),\n        {\n          customMessages: {\n            SERVER_ERROR: 'Failed to save generated details. Please try saving manually.'\n          }\n        }\n      );\n      \n      if (updateError) {\n        console.error('Failed to update task with generated details:', updateError);\n        updateOperatorStatus(task.task_id, 'details_generator', 'failed', 0);\n      } else {\n        updateOperatorStatus(task.task_id, 'details_generator', 'completed', 100);\n      }\n    }\n    \n    setIsGenerating(false);\n  };\n\n  // Save task details\n  const handleSave = async () => {\n    if (!task) return { success: false };\n    \n    setIsSaving(true);\n    \n    try {\n      // First, save the task details\n      const { data, error } = await withErrorHandling(\n        () => apiClient.patchWithLoading(`/tasks/${task.task_id}/details`, {\n          implementation_details: implementationDetails,\n          story_points: storyPoints\n        }, LoadingTypes.SAVE),\n        {\n          customMessages: {\n            VALIDATION_ERROR: 'Please check your task details and try again.',\n            SERVER_ERROR: 'Unable to save task details. Please try again later.'\n          }\n        }\n      );\n      \n      if (error) {\n        throw error;\n      }\n      \n      // If the server adjusted the story points (to match Fibonacci), update our local state\n      if (data && data.story_points && data.story_points !== storyPoints) {\n        logger.debug(`Server adjusted story points from ${storyPoints} to ${data.story_points}`);\n        setStoryPoints(data.story_points);\n      }\n      \n      // If the server generated implementation details for an atomic task, update our local state\n      if (data && data.implementation_details && \n          (!implementationDetails || implementationDetails.trim() === '') && \n          data.implementation_details.trim() !== '') {\n        logger.debug('Server generated implementation details for atomic task');\n        setImplementationDetails(data.implementation_details);\n      }\n      \n      return { \n        success: true, \n        adjustedStoryPoints: data?.story_points,\n        generatedDetails: data?.implementation_details\n      };\n    } catch (err) {\n      logger.error('Error saving task details:', err);\n      return { success: false, error: err };\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  return {\n    implementationDetails,\n    setImplementationDetails,\n    storyPoints,\n    setStoryPoints,\n    projectStandards,\n    techStack,\n    isSaving,\n    isGenerating,\n    generateImplementationDetails,\n    handleSave\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}