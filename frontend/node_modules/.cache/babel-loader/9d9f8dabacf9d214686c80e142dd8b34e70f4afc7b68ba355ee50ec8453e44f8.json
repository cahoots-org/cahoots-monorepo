{"ast":null,"code":"import{useApp}from'../contexts/AppContext';// Simple notification hook that works with the AppContext\nexport const useNotification=()=>{const{showNotification}=useApp();return{showNotification:function(message){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'info';// For now, just log to console since we don't have notification system yet\nconsole.log(`${type.toUpperCase()}: ${message}`);// If AppContext has showNotification, use it\nif(showNotification){showNotification(message,type);}}};};","map":{"version":3,"names":["useApp","useNotification","showNotification","message","type","arguments","length","undefined","console","log","toUpperCase"],"sources":["/app/src/hooks/useNotification.js"],"sourcesContent":["import { useApp } from '../contexts/AppContext';\n\n// Simple notification hook that works with the AppContext\nexport const useNotification = () => {\n  const { showNotification } = useApp();\n\n  return {\n    showNotification: (message, type = 'info') => {\n      // For now, just log to console since we don't have notification system yet\n      console.log(`${type.toUpperCase()}: ${message}`);\n      \n      // If AppContext has showNotification, use it\n      if (showNotification) {\n        showNotification(message, type);\n      }\n    },\n  };\n};"],"mappings":"AAAA,OAASA,MAAM,KAAQ,wBAAwB,CAE/C;AACA,MAAO,MAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CACnC,KAAM,CAAEC,gBAAiB,CAAC,CAAGF,MAAM,CAAC,CAAC,CAErC,MAAO,CACLE,gBAAgB,CAAE,QAAAA,CAACC,OAAO,CAAoB,IAAlB,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,MAAM,CACvC;AACAG,OAAO,CAACC,GAAG,CAAC,GAAGL,IAAI,CAACM,WAAW,CAAC,CAAC,KAAKP,OAAO,EAAE,CAAC,CAEhD;AACA,GAAID,gBAAgB,CAAE,CACpBA,gBAAgB,CAACC,OAAO,CAAEC,IAAI,CAAC,CACjC,CACF,CACF,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}