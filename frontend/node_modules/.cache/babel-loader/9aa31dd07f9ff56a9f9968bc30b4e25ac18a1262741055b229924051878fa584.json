{"ast":null,"code":"import React,{createContext,useState,useEffect,useContext,useRef,useMemo}from'react';import{useNavigate}from'react-router-dom';import apiClient from'../services/unifiedApiClient';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;// Initialize state\nconst[user,setUser]=useState(()=>{// Try to get user from localStorage on initial load\nconst savedUser=localStorage.getItem('user');return savedUser?JSON.parse(savedUser):null;});const[loading,setLoading]=useState(true);// Start with loading true for initial auth check\nconst[error,setError]=useState(null);const navigate=useNavigate();const initializingRef=useRef(false);const refreshingRef=useRef(false);// Initialize API client\nconst client=useMemo(()=>{const client=apiClient;// Check for existing refresh token\nconst refreshToken=localStorage.getItem('refresh_token');if(refreshToken){// Token exists, we'll attempt to refresh it in useEffect\n// Token exists, we'll attempt to refresh it in useEffect\n}return client;},[]);// Make navigate available globally for API client auth error handling\nuseEffect(()=>{window.__CAHOOTS_NAVIGATE=navigate;return()=>{delete window.__CAHOOTS_NAVIGATE;};},[navigate]);// Initialize auth state with race condition protection\nuseEffect(()=>{if(initializingRef.current)return;initializingRef.current=true;const initAuth=async()=>{try{const token=localStorage.getItem('token');// Get actual stored token, not dev-bypass\nconst refreshToken=localStorage.getItem('refresh_token');if(token||token==='dev-bypass-token'){// Clear logout flag when user is authenticated with real token\nlocalStorage.removeItem('has_logged_out');// Verify token by fetching user data (works for both real tokens and dev-bypass-token)\nconst userData=await apiClient.get('/auth/me');console.log('[AuthContext] Initial auth check - userData:',userData);console.log('[AuthContext] User role from /auth/me:',userData.role);console.log('[AuthContext] User email from /auth/me:',userData.email);setUser(userData);localStorage.setItem('user',JSON.stringify(userData));}else if(refreshToken){// We have a refresh token but no access token, try to refresh\ntry{// Use the refreshToken method from the API client\nawait apiClient.refreshToken();// If successful, fetch user data\nconst userData=await apiClient.get('/auth/me');setUser(userData);localStorage.setItem('user',JSON.stringify(userData));}catch(refreshErr){console.error('[AuthContext] Token refresh failed:',refreshErr);// Remove invalid refresh token\nlocalStorage.removeItem('refresh_token');handleAuthError('Session expired. Please log in again.');}}else{}}catch(err){// Token is invalid or expired\nconsole.error('[AuthContext] Auth initialization error:',err);handleAuthError('Session expired. Please log in again.');}finally{setLoading(false);initializingRef.current=false;}};initAuth();},[]);// Handle authentication errors consistently\nconst handleAuthError=function(){let message=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'Authentication failed';setUser(null);setError(message);apiClient.setAuthToken(null);localStorage.removeItem('user');// Auto-clear error after 5 seconds\nsetTimeout(()=>setError(null),5000);};// Enhanced token refresh with retry logic\nconst refreshToken=async()=>{if(refreshingRef.current)return false;refreshingRef.current=true;try{setError(null);const response=await apiClient.refreshToken();// Fetch updated user data\nconst userData=await apiClient.get('/auth/me');setUser(userData);localStorage.setItem('user',JSON.stringify(userData));return true;}catch(err){handleAuthError('Session expired. Please log in again.');return false;}finally{refreshingRef.current=false;}};// Enhanced login with better error handling\nconst login=async(email,password)=>{try{setError(null);setLoading(true);// Create form data for OAuth2 token endpoint\nconst formData=new FormData();formData.append('username',email);formData.append('password',password);// Pass config to set proper Content-Type for FormData\nconst tokenResponse=await apiClient.post('/auth/token',formData,{headers:{'Content-Type':'application/x-www-form-urlencoded'}});const{access_token,refresh_token}=tokenResponse;// Store both tokens\napiClient.setAuthToken(access_token);localStorage.setItem('refresh_token',refresh_token);// Clear logout flag on successful login\nlocalStorage.removeItem('has_logged_out');// Fetch user data\nconst userData=await apiClient.get('/auth/me');setUser(userData);localStorage.setItem('user',JSON.stringify(userData));return userData;}catch(err){const message=err.userMessage||'Login failed. Please check your credentials.';setError(message);throw new Error(message);}finally{setLoading(false);}};// Enhanced registration\nconst register=async userData=>{try{setError(null);setLoading(true);const response=await apiClient.post('/auth/register',userData);return response;}catch(err){const message=err.userMessage||'Registration failed. Please try again.';setError(message);throw new Error(message);}finally{setLoading(false);}};// Enhanced logout with cleanup\nconst logout=async()=>{try{setLoading(true);// Call logout endpoint if authenticated\nif(user&&apiClient.getAuthToken()){await apiClient.post('/auth/logout');}}catch(err){// Log error but don't prevent logout\nconsole.error('Logout API call failed:',err);}finally{// Always clean up local state\nsetUser(null);setError(null);apiClient.setAuthToken(null);localStorage.removeItem('user');localStorage.removeItem('token');localStorage.removeItem('refresh_token');// Clean up legacy global settings (migration cleanup)\nlocalStorage.removeItem('userSettings');// Set logout flag to prevent dev-bypass-token from auto-login\nlocalStorage.setItem('has_logged_out','true');// Clear any OAuth state\nsessionStorage.removeItem('oauth_state');sessionStorage.removeItem('oauth_retry_count');setLoading(false);}};// Enhanced OAuth URL generation\nconst getOAuthUrl=async provider=>{try{setError(null);const redirectUri=`${window.location.origin}/oauth/${provider}/callback`;const response=await apiClient.get(`/auth/${provider}/authorize`,{params:{redirect_uri:redirectUri}});// Store state for CSRF protection\nif(response.state){sessionStorage.setItem('oauth_state',response.state);}return response.redirect_uri;}catch(err){const message=err.userMessage||`Failed to get ${provider} authorization URL`;setError(message);throw new Error(message);}};// Enhanced OAuth callback handling\nconst handleOAuthCallback=async userData=>{try{setError(null);if(!(userData!==null&&userData!==void 0&&userData.id)){throw new Error('Invalid user data received from OAuth provider');}// Log the user data to check if role is included\nconsole.log('[AuthContext] handleOAuthCallback - userData:',userData);console.log('[AuthContext] User role:',userData.role);console.log('[AuthContext] User email:',userData.email);setUser(userData);localStorage.setItem('user',JSON.stringify(userData));// Clear logout flag on successful OAuth login\nlocalStorage.removeItem('has_logged_out');// Verify token was set by OAuth callback endpoint\nconst token=apiClient.getAuthToken();if(!token){throw new Error('No authentication token received');}// Clear OAuth state\nsessionStorage.removeItem('oauth_state');sessionStorage.removeItem('oauth_retry_count');return userData;}catch(err){const message=err.message||'Failed to process OAuth authentication';handleAuthError(message);throw new Error(message);}};// Enhanced authentication check\nconst isAuthenticated=()=>{const token=apiClient.getAuthToken();// In development mode, allow dev-bypass-token and set up user if needed\nif(token==='dev-bypass-token'){// Only create dev user if we don't have one yet\nif(!user){const storedUser=localStorage.getItem('user');if(storedUser){const parsedUser=JSON.parse(storedUser);setUser(parsedUser);}else{// Create default dev admin user (matches what the backend returns)\nconst defaultUser={id:'dev-user-123',email:'admin@cahoots.cc',username:'admin',full_name:'Admin User',role:'admin',subscription_tier:'enterprise',subscription_status:'active',monthly_task_limit:1000,tasks_created_this_month:0};setUser(defaultUser);localStorage.setItem('user',JSON.stringify(defaultUser));}}return true;}return!!(user&&token);};// Clear error manually\nconst clearError=()=>{setError(null);};const contextValue={// State\nuser,loading,error,// Actions\nlogin,register,logout,refreshToken,getOAuthUrl,handleOAuthCallback,isAuthenticated,clearError,// Internal state setters for OAuth callback component\nsetUser,setLoading,setError};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:contextValue,children:children});};// Enhanced useAuth hook with better error handling\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export default AuthContext;","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useRef","useMemo","useNavigate","apiClient","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","savedUser","localStorage","getItem","JSON","parse","loading","setLoading","error","setError","navigate","initializingRef","refreshingRef","client","refreshToken","window","__CAHOOTS_NAVIGATE","current","initAuth","token","removeItem","userData","get","console","log","role","email","setItem","stringify","refreshErr","handleAuthError","err","message","arguments","length","undefined","setAuthToken","setTimeout","response","login","password","formData","FormData","append","tokenResponse","post","headers","access_token","refresh_token","userMessage","Error","register","logout","getAuthToken","sessionStorage","getOAuthUrl","provider","redirectUri","location","origin","params","redirect_uri","state","handleOAuthCallback","id","isAuthenticated","storedUser","parsedUser","defaultUser","username","full_name","subscription_tier","subscription_status","monthly_task_limit","tasks_created_this_month","clearError","contextValue","Provider","value","useAuth","context"],"sources":["/app/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useRef, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport apiClient from '../services/unifiedApiClient';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  // Initialize state\n  const [user, setUser] = useState(() => {\n    // Try to get user from localStorage on initial load\n    const savedUser = localStorage.getItem('user');\n    return savedUser ? JSON.parse(savedUser) : null;\n  });\n  const [loading, setLoading] = useState(true); // Start with loading true for initial auth check\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const initializingRef = useRef(false);\n  const refreshingRef = useRef(false);\n\n  // Initialize API client\n  const client = useMemo(() => {\n    const client = apiClient;\n    // Check for existing refresh token\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (refreshToken) {\n      // Token exists, we'll attempt to refresh it in useEffect\n      // Token exists, we'll attempt to refresh it in useEffect\n    }\n    return client;\n  }, []);\n\n  // Make navigate available globally for API client auth error handling\n  useEffect(() => {\n    window.__CAHOOTS_NAVIGATE = navigate;\n    return () => {\n      delete window.__CAHOOTS_NAVIGATE;\n    };\n  }, [navigate]);\n\n  // Initialize auth state with race condition protection\n  useEffect(() => {\n    if (initializingRef.current) return;\n    initializingRef.current = true;\n    \n    const initAuth = async () => {\n      try {\n        const token = localStorage.getItem('token'); // Get actual stored token, not dev-bypass\n        const refreshToken = localStorage.getItem('refresh_token');\n        \n        \n        if (token || token === 'dev-bypass-token') {\n          // Clear logout flag when user is authenticated with real token\n          localStorage.removeItem('has_logged_out');\n          \n          // Verify token by fetching user data (works for both real tokens and dev-bypass-token)\n          const userData = await apiClient.get('/auth/me');\n          console.log('[AuthContext] Initial auth check - userData:', userData);\n          console.log('[AuthContext] User role from /auth/me:', userData.role);\n          console.log('[AuthContext] User email from /auth/me:', userData.email);\n          setUser(userData);\n          localStorage.setItem('user', JSON.stringify(userData));\n        } else if (refreshToken) {\n          // We have a refresh token but no access token, try to refresh\n          try {\n            // Use the refreshToken method from the API client\n            await apiClient.refreshToken();\n            \n            // If successful, fetch user data\n            const userData = await apiClient.get('/auth/me');\n            setUser(userData);\n            localStorage.setItem('user', JSON.stringify(userData));\n          } catch (refreshErr) {\n            console.error('[AuthContext] Token refresh failed:', refreshErr);\n            // Remove invalid refresh token\n            localStorage.removeItem('refresh_token');\n            handleAuthError('Session expired. Please log in again.');\n          }\n        } else {\n        }\n      } catch (err) {\n        // Token is invalid or expired\n        console.error('[AuthContext] Auth initialization error:', err);\n        handleAuthError('Session expired. Please log in again.');\n      } finally {\n        setLoading(false);\n        initializingRef.current = false;\n      }\n    };\n\n    initAuth();\n  }, []);\n\n  // Handle authentication errors consistently\n  const handleAuthError = (message = 'Authentication failed') => {\n    setUser(null);\n    setError(message);\n    apiClient.setAuthToken(null);\n    localStorage.removeItem('user');\n    \n    // Auto-clear error after 5 seconds\n    setTimeout(() => setError(null), 5000);\n  };\n\n  // Enhanced token refresh with retry logic\n  const refreshToken = async () => {\n    if (refreshingRef.current) return false;\n    refreshingRef.current = true;\n    \n    try {\n      setError(null);\n      const response = await apiClient.refreshToken();\n      \n      // Fetch updated user data\n      const userData = await apiClient.get('/auth/me');\n      setUser(userData);\n      localStorage.setItem('user', JSON.stringify(userData));\n      \n      return true;\n    } catch (err) {\n      handleAuthError('Session expired. Please log in again.');\n      return false;\n    } finally {\n      refreshingRef.current = false;\n    }\n  };\n\n  // Enhanced login with better error handling\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      setLoading(true);\n\n      // Create form data for OAuth2 token endpoint\n      const formData = new FormData();\n      formData.append('username', email);\n      formData.append('password', password);\n\n      // Pass config to set proper Content-Type for FormData\n      const tokenResponse = await apiClient.post('/auth/token', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      const { access_token, refresh_token } = tokenResponse;\n\n      // Store both tokens\n      apiClient.setAuthToken(access_token);\n      localStorage.setItem('refresh_token', refresh_token);\n      \n      // Clear logout flag on successful login\n      localStorage.removeItem('has_logged_out');\n\n      // Fetch user data\n      const userData = await apiClient.get('/auth/me');\n      setUser(userData);\n      localStorage.setItem('user', JSON.stringify(userData));\n\n      return userData;\n    } catch (err) {\n      const message = err.userMessage || 'Login failed. Please check your credentials.';\n      setError(message);\n      throw new Error(message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Enhanced registration\n  const register = async (userData) => {\n    try {\n      setError(null);\n      setLoading(true);\n      \n      const response = await apiClient.post('/auth/register', userData);\n      return response;\n    } catch (err) {\n      const message = err.userMessage || 'Registration failed. Please try again.';\n      setError(message);\n      throw new Error(message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Enhanced logout with cleanup\n  const logout = async () => {\n    try {\n      setLoading(true);\n      \n      // Call logout endpoint if authenticated\n      if (user && apiClient.getAuthToken()) {\n        await apiClient.post('/auth/logout');\n      }\n    } catch (err) {\n      // Log error but don't prevent logout\n      console.error('Logout API call failed:', err);\n    } finally {\n      // Always clean up local state\n      setUser(null);\n      setError(null);\n      apiClient.setAuthToken(null);\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n      localStorage.removeItem('refresh_token');\n      \n      // Clean up legacy global settings (migration cleanup)\n      localStorage.removeItem('userSettings');\n      \n      // Set logout flag to prevent dev-bypass-token from auto-login\n      localStorage.setItem('has_logged_out', 'true');\n      \n      // Clear any OAuth state\n      sessionStorage.removeItem('oauth_state');\n      sessionStorage.removeItem('oauth_retry_count');\n      \n      setLoading(false);\n      \n    }\n  };\n\n  // Enhanced OAuth URL generation\n  const getOAuthUrl = async (provider) => {\n    try {\n      setError(null);\n      \n      const redirectUri = `${window.location.origin}/oauth/${provider}/callback`;\n      const response = await apiClient.get(`/auth/${provider}/authorize`, {\n        params: { redirect_uri: redirectUri }\n      });\n      \n      // Store state for CSRF protection\n      if (response.state) {\n        sessionStorage.setItem('oauth_state', response.state);\n      }\n      \n      return response.redirect_uri;\n    } catch (err) {\n      const message = err.userMessage || `Failed to get ${provider} authorization URL`;\n      setError(message);\n      throw new Error(message);\n    }\n  };\n\n  // Enhanced OAuth callback handling\n  const handleOAuthCallback = async (userData) => {\n    try {\n      setError(null);\n      \n      if (!userData?.id) {\n        throw new Error('Invalid user data received from OAuth provider');\n      }\n      \n      // Log the user data to check if role is included\n      console.log('[AuthContext] handleOAuthCallback - userData:', userData);\n      console.log('[AuthContext] User role:', userData.role);\n      console.log('[AuthContext] User email:', userData.email);\n      \n      setUser(userData);\n      localStorage.setItem('user', JSON.stringify(userData));\n      \n      // Clear logout flag on successful OAuth login\n      localStorage.removeItem('has_logged_out');\n      \n      // Verify token was set by OAuth callback endpoint\n      const token = apiClient.getAuthToken();\n      if (!token) {\n        throw new Error('No authentication token received');\n      }\n      \n      // Clear OAuth state\n      sessionStorage.removeItem('oauth_state');\n      sessionStorage.removeItem('oauth_retry_count');\n      \n      return userData;\n    } catch (err) {\n      const message = err.message || 'Failed to process OAuth authentication';\n      handleAuthError(message);\n      throw new Error(message);\n    }\n  };\n\n  // Enhanced authentication check\n  const isAuthenticated = () => {\n    const token = apiClient.getAuthToken();\n    \n    // In development mode, allow dev-bypass-token and set up user if needed\n    if (token === 'dev-bypass-token') {\n      // Only create dev user if we don't have one yet\n      if (!user) {\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n          const parsedUser = JSON.parse(storedUser);\n          setUser(parsedUser);\n        } else {\n          // Create default dev admin user (matches what the backend returns)\n          const defaultUser = {\n            id: 'dev-user-123',\n            email: 'admin@cahoots.cc',\n            username: 'admin',\n            full_name: 'Admin User',\n            role: 'admin',\n            subscription_tier: 'enterprise',\n            subscription_status: 'active',\n            monthly_task_limit: 1000,\n            tasks_created_this_month: 0\n          };\n          setUser(defaultUser);\n          localStorage.setItem('user', JSON.stringify(defaultUser));\n        }\n      }\n      return true;\n    }\n    \n    return !!(user && token);\n  };\n\n  // Clear error manually\n  const clearError = () => {\n    setError(null);\n  };\n\n  const contextValue = {\n    // State\n    user,\n    loading,\n    error,\n    \n    // Actions\n    login,\n    register,\n    logout,\n    refreshToken,\n    getOAuthUrl,\n    handleOAuthCallback,\n    isAuthenticated,\n    clearError,\n    \n    // Internal state setters for OAuth callback component\n    setUser,\n    setLoading,\n    setError\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Enhanced useAuth hook with better error handling\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}