{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState,useCallback}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const defaultSettings={darkMode:false,notifications:true,trelloIntegration:{enabled:false,apiKey:'',token:''},jiraIntegration:{enabled:false,jiraUrl:'',userEmail:'',apiToken:'',accountId:''}};const SettingsContext=/*#__PURE__*/createContext({settings:defaultSettings,updateSettings:()=>{},loadUserSettings:()=>{},settingsLoaded:false});export const SettingsProvider=_ref=>{let{children}=_ref;const[settings,setSettings]=useState(defaultSettings);const[currentUserId,setCurrentUserId]=useState(null);const[settingsLoaded,setSettingsLoaded]=useState(false);// Load user-specific settings\nconst loadUserSettings=useCallback(userId=>{console.log('[SettingsContext] loadUserSettings called with userId:',userId,'currentUserId:',currentUserId,'settingsLoaded:',settingsLoaded);if(!userId){// No user - use default settings\nconsole.log('[SettingsContext] No user, resetting to default settings');setSettings(defaultSettings);setCurrentUserId(null);setSettingsLoaded(true);return;}if(userId===currentUserId&&settingsLoaded){// Same user and settings already loaded, no need to reload\nconsole.log('[SettingsContext] Same user and settings loaded, no reload needed');return;}const userSettingsKey=`userSettings:${userId}`;const saved=localStorage.getItem(userSettingsKey);console.log('[SettingsContext] Loading settings for key:',userSettingsKey);console.log('[SettingsContext] Saved settings:',saved);if(saved){try{const parsedSettings=JSON.parse(saved);console.log('[SettingsContext] Parsed settings:',parsedSettings);const mergedSettings={...defaultSettings,...parsedSettings,trelloIntegration:{...defaultSettings.trelloIntegration,...parsedSettings.trelloIntegration},jiraIntegration:{...defaultSettings.jiraIntegration,...parsedSettings.jiraIntegration}};console.log('[SettingsContext] Merged settings:',mergedSettings);setSettings(mergedSettings);}catch(error){console.error('[SettingsContext] Error parsing user settings:',error);setSettings(defaultSettings);}}else{// First time user - use default settings\nconsole.log('[SettingsContext] No saved settings, using defaults');setSettings(defaultSettings);}setCurrentUserId(userId);setSettingsLoaded(true);},[currentUserId,settingsLoaded]);// Save settings when they change (only if we have a current user)\nuseEffect(()=>{if(currentUserId){const userSettingsKey=`userSettings:${currentUserId}`;console.log('[SettingsContext] Saving settings to key:',userSettingsKey);console.log('[SettingsContext] Settings being saved:',settings);localStorage.setItem(userSettingsKey,JSON.stringify(settings));// Handle email notifications preference change\nif(settings.notifications!==undefined){console.log(`[SettingsContext] Email notifications preference changed for user ${currentUserId}:`,settings.notifications?'enabled':'disabled');// Here you could integrate with a backend API to update user preferences\n// For now, we'll just log the change and store it locally\n// Future integration example:\n// apiClient.updateUserPreferences({ emailNotifications: settings.notifications });\n}}else{console.log('[SettingsContext] No currentUserId, not saving settings');}},[settings,currentUserId]);const updateSettings=useCallback(newSettings=>{console.log('[SettingsContext] updateSettings called with:',newSettings);setSettings(newSettings);},[]);return/*#__PURE__*/_jsx(SettingsContext.Provider,{value:{settings,updateSettings,loadUserSettings,settingsLoaded},children:children});};export const useSettings=()=>useContext(SettingsContext);","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useCallback","jsx","_jsx","defaultSettings","darkMode","notifications","trelloIntegration","enabled","apiKey","token","jiraIntegration","jiraUrl","userEmail","apiToken","accountId","SettingsContext","settings","updateSettings","loadUserSettings","settingsLoaded","SettingsProvider","_ref","children","setSettings","currentUserId","setCurrentUserId","setSettingsLoaded","userId","console","log","userSettingsKey","saved","localStorage","getItem","parsedSettings","JSON","parse","mergedSettings","error","setItem","stringify","undefined","newSettings","Provider","value","useSettings"],"sources":["/app/src/contexts/SettingsContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\n\nconst defaultSettings = {\n  darkMode: false,\n  notifications: true,\n  trelloIntegration: {\n    enabled: false,\n    apiKey: '',\n    token: ''\n  },\n  jiraIntegration: {\n    enabled: false,\n    jiraUrl: '',\n    userEmail: '',\n    apiToken: '',\n    accountId: ''\n  }\n};\n\nconst SettingsContext = createContext({\n  settings: defaultSettings,\n  updateSettings: () => {},\n  loadUserSettings: () => {},\n  settingsLoaded: false,\n});\n\nexport const SettingsProvider = ({ children }) => {\n  const [settings, setSettings] = useState(defaultSettings);\n  const [currentUserId, setCurrentUserId] = useState(null);\n  const [settingsLoaded, setSettingsLoaded] = useState(false);\n\n  // Load user-specific settings\n  const loadUserSettings = useCallback((userId) => {\n    console.log('[SettingsContext] loadUserSettings called with userId:', userId, 'currentUserId:', currentUserId, 'settingsLoaded:', settingsLoaded);\n    \n    if (!userId) {\n      // No user - use default settings\n      console.log('[SettingsContext] No user, resetting to default settings');\n      setSettings(defaultSettings);\n      setCurrentUserId(null);\n      setSettingsLoaded(true);\n      return;\n    }\n\n    if (userId === currentUserId && settingsLoaded) {\n      // Same user and settings already loaded, no need to reload\n      console.log('[SettingsContext] Same user and settings loaded, no reload needed');\n      return;\n    }\n\n    const userSettingsKey = `userSettings:${userId}`;\n    const saved = localStorage.getItem(userSettingsKey);\n    console.log('[SettingsContext] Loading settings for key:', userSettingsKey);\n    console.log('[SettingsContext] Saved settings:', saved);\n    \n    if (saved) {\n      try {\n        const parsedSettings = JSON.parse(saved);\n        console.log('[SettingsContext] Parsed settings:', parsedSettings);\n        const mergedSettings = {\n          ...defaultSettings,\n          ...parsedSettings,\n          trelloIntegration: {\n            ...defaultSettings.trelloIntegration,\n            ...parsedSettings.trelloIntegration\n          },\n          jiraIntegration: {\n            ...defaultSettings.jiraIntegration,\n            ...parsedSettings.jiraIntegration\n          }\n        };\n        console.log('[SettingsContext] Merged settings:', mergedSettings);\n        setSettings(mergedSettings);\n      } catch (error) {\n        console.error('[SettingsContext] Error parsing user settings:', error);\n        setSettings(defaultSettings);\n      }\n    } else {\n      // First time user - use default settings\n      console.log('[SettingsContext] No saved settings, using defaults');\n      setSettings(defaultSettings);\n    }\n    \n    setCurrentUserId(userId);\n    setSettingsLoaded(true);\n  }, [currentUserId, settingsLoaded]);\n\n  // Save settings when they change (only if we have a current user)\n  useEffect(() => {\n    if (currentUserId) {\n      const userSettingsKey = `userSettings:${currentUserId}`;\n      console.log('[SettingsContext] Saving settings to key:', userSettingsKey);\n      console.log('[SettingsContext] Settings being saved:', settings);\n      localStorage.setItem(userSettingsKey, JSON.stringify(settings));\n      \n      // Handle email notifications preference change\n      if (settings.notifications !== undefined) {\n        console.log(`[SettingsContext] Email notifications preference changed for user ${currentUserId}:`, settings.notifications ? 'enabled' : 'disabled');\n        \n        // Here you could integrate with a backend API to update user preferences\n        // For now, we'll just log the change and store it locally\n        \n        // Future integration example:\n        // apiClient.updateUserPreferences({ emailNotifications: settings.notifications });\n      }\n    } else {\n      console.log('[SettingsContext] No currentUserId, not saving settings');\n    }\n  }, [settings, currentUserId]);\n\n  const updateSettings = useCallback((newSettings) => {\n    console.log('[SettingsContext] updateSettings called with:', newSettings);\n    setSettings(newSettings);\n  }, []);\n\n  return (\n    <SettingsContext.Provider value={{ settings, updateSettings, loadUserSettings, settingsLoaded }}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport const useSettings = () => useContext(SettingsContext);\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,SAAS,CAAEC,QAAQ,CAAEC,WAAW,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE3F,KAAM,CAAAC,eAAe,CAAG,CACtBC,QAAQ,CAAE,KAAK,CACfC,aAAa,CAAE,IAAI,CACnBC,iBAAiB,CAAE,CACjBC,OAAO,CAAE,KAAK,CACdC,MAAM,CAAE,EAAE,CACVC,KAAK,CAAE,EACT,CAAC,CACDC,eAAe,CAAE,CACfH,OAAO,CAAE,KAAK,CACdI,OAAO,CAAE,EAAE,CACXC,SAAS,CAAE,EAAE,CACbC,QAAQ,CAAE,EAAE,CACZC,SAAS,CAAE,EACb,CACF,CAAC,CAED,KAAM,CAAAC,eAAe,cAAGnB,aAAa,CAAC,CACpCoB,QAAQ,CAAEb,eAAe,CACzBc,cAAc,CAAEA,CAAA,GAAM,CAAC,CAAC,CACxBC,gBAAgB,CAAEA,CAAA,GAAM,CAAC,CAAC,CAC1BC,cAAc,CAAE,KAClB,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAC,gBAAgB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC3C,KAAM,CAACL,QAAQ,CAAEO,WAAW,CAAC,CAAGxB,QAAQ,CAACI,eAAe,CAAC,CACzD,KAAM,CAACqB,aAAa,CAAEC,gBAAgB,CAAC,CAAG1B,QAAQ,CAAC,IAAI,CAAC,CACxD,KAAM,CAACoB,cAAc,CAAEO,iBAAiB,CAAC,CAAG3B,QAAQ,CAAC,KAAK,CAAC,CAE3D;AACA,KAAM,CAAAmB,gBAAgB,CAAGlB,WAAW,CAAE2B,MAAM,EAAK,CAC/CC,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAEF,MAAM,CAAE,gBAAgB,CAAEH,aAAa,CAAE,iBAAiB,CAAEL,cAAc,CAAC,CAEjJ,GAAI,CAACQ,MAAM,CAAE,CACX;AACAC,OAAO,CAACC,GAAG,CAAC,0DAA0D,CAAC,CACvEN,WAAW,CAACpB,eAAe,CAAC,CAC5BsB,gBAAgB,CAAC,IAAI,CAAC,CACtBC,iBAAiB,CAAC,IAAI,CAAC,CACvB,OACF,CAEA,GAAIC,MAAM,GAAKH,aAAa,EAAIL,cAAc,CAAE,CAC9C;AACAS,OAAO,CAACC,GAAG,CAAC,mEAAmE,CAAC,CAChF,OACF,CAEA,KAAM,CAAAC,eAAe,CAAG,gBAAgBH,MAAM,EAAE,CAChD,KAAM,CAAAI,KAAK,CAAGC,YAAY,CAACC,OAAO,CAACH,eAAe,CAAC,CACnDF,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAEC,eAAe,CAAC,CAC3EF,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAEE,KAAK,CAAC,CAEvD,GAAIA,KAAK,CAAE,CACT,GAAI,CACF,KAAM,CAAAG,cAAc,CAAGC,IAAI,CAACC,KAAK,CAACL,KAAK,CAAC,CACxCH,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAEK,cAAc,CAAC,CACjE,KAAM,CAAAG,cAAc,CAAG,CACrB,GAAGlC,eAAe,CAClB,GAAG+B,cAAc,CACjB5B,iBAAiB,CAAE,CACjB,GAAGH,eAAe,CAACG,iBAAiB,CACpC,GAAG4B,cAAc,CAAC5B,iBACpB,CAAC,CACDI,eAAe,CAAE,CACf,GAAGP,eAAe,CAACO,eAAe,CAClC,GAAGwB,cAAc,CAACxB,eACpB,CACF,CAAC,CACDkB,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAEQ,cAAc,CAAC,CACjEd,WAAW,CAACc,cAAc,CAAC,CAC7B,CAAE,MAAOC,KAAK,CAAE,CACdV,OAAO,CAACU,KAAK,CAAC,gDAAgD,CAAEA,KAAK,CAAC,CACtEf,WAAW,CAACpB,eAAe,CAAC,CAC9B,CACF,CAAC,IAAM,CACL;AACAyB,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC,CAClEN,WAAW,CAACpB,eAAe,CAAC,CAC9B,CAEAsB,gBAAgB,CAACE,MAAM,CAAC,CACxBD,iBAAiB,CAAC,IAAI,CAAC,CACzB,CAAC,CAAE,CAACF,aAAa,CAAEL,cAAc,CAAC,CAAC,CAEnC;AACArB,SAAS,CAAC,IAAM,CACd,GAAI0B,aAAa,CAAE,CACjB,KAAM,CAAAM,eAAe,CAAG,gBAAgBN,aAAa,EAAE,CACvDI,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAEC,eAAe,CAAC,CACzEF,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAEb,QAAQ,CAAC,CAChEgB,YAAY,CAACO,OAAO,CAACT,eAAe,CAAEK,IAAI,CAACK,SAAS,CAACxB,QAAQ,CAAC,CAAC,CAE/D;AACA,GAAIA,QAAQ,CAACX,aAAa,GAAKoC,SAAS,CAAE,CACxCb,OAAO,CAACC,GAAG,CAAC,qEAAqEL,aAAa,GAAG,CAAER,QAAQ,CAACX,aAAa,CAAG,SAAS,CAAG,UAAU,CAAC,CAEnJ;AACA;AAEA;AACA;AACF,CACF,CAAC,IAAM,CACLuB,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC,CACxE,CACF,CAAC,CAAE,CAACb,QAAQ,CAAEQ,aAAa,CAAC,CAAC,CAE7B,KAAM,CAAAP,cAAc,CAAGjB,WAAW,CAAE0C,WAAW,EAAK,CAClDd,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAEa,WAAW,CAAC,CACzEnB,WAAW,CAACmB,WAAW,CAAC,CAC1B,CAAC,CAAE,EAAE,CAAC,CAEN,mBACExC,IAAA,CAACa,eAAe,CAAC4B,QAAQ,EAACC,KAAK,CAAE,CAAE5B,QAAQ,CAAEC,cAAc,CAAEC,gBAAgB,CAAEC,cAAe,CAAE,CAAAG,QAAA,CAC7FA,QAAQ,CACe,CAAC,CAE/B,CAAC,CAED,MAAO,MAAM,CAAAuB,WAAW,CAAGA,CAAA,GAAMhD,UAAU,CAACkB,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}