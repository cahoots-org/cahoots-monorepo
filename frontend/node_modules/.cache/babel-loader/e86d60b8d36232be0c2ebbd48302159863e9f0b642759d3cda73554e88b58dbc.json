{"ast":null,"code":"/**\n * Centralized loading state management service\n *//**\n * Loading state types for different operations\n */export const LoadingTypes={// Task operations\nTASKS_FETCH:'tasks_fetch',TASK_CREATE:'task_create',TASK_UPDATE:'task_update',TASK_DELETE:'task_delete',TASK_TREE_FETCH:'task_tree_fetch',TASK_STATS_FETCH:'task_stats_fetch',// Authentication operations\nAUTH_LOGIN:'auth_login',AUTH_REGISTER:'auth_register',AUTH_OAUTH:'auth_oauth',AUTH_REFRESH:'auth_refresh',// Content generation\nGENERATE_DETAILS:'generate_details',DECOMPOSE_TASK:'decompose_task',// Export operations\nEXPORT_TRELLO:'export_trello',EXPORT_JSON:'export_json',// General operations\nSAVE:'save',SUBMIT:'submit',PROCESS:'process'};/**\n * Loading state manager class\n */class LoadingStateManager{constructor(){this.loadingStates=new Map();this.subscribers=new Set();}/**\n   * Set loading state for a specific operation\n   */setLoading(type,isLoading){let message=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;const currentState=this.loadingStates.get(type)||{};const newState={...currentState,isLoading,message:isLoading?message||this.getDefaultMessage(type):null,timestamp:Date.now()};this.loadingStates.set(type,newState);this.notifySubscribers(type,newState);}/**\n   * Get loading state for a specific operation\n   */getLoading(type){return this.loadingStates.get(type)||{isLoading:false,message:null};}/**\n   * Check if any loading operation is active\n   */isAnyLoading(){return Array.from(this.loadingStates.values()).some(state=>state.isLoading);}/**\n   * Get all active loading operations\n   */getActiveLoadings(){const active=[];this.loadingStates.forEach((state,type)=>{if(state.isLoading){active.push({type,...state});}});return active;}/**\n   * Clear all loading states\n   */clearAll(){this.loadingStates.clear();this.notifySubscribers('*',{cleared:true});}/**\n   * Subscribe to loading state changes\n   */subscribe(callback){this.subscribers.add(callback);return()=>this.subscribers.delete(callback);}/**\n   * Notify all subscribers of state changes\n   */notifySubscribers(type,state){this.subscribers.forEach(callback=>{try{callback(type,state);}catch(error){console.error('Error in loading state subscriber:',error);}});}/**\n   * Get default loading message for operation type\n   */getDefaultMessage(type){const messages={[LoadingTypes.TASKS_FETCH]:'Loading tasks...',[LoadingTypes.TASK_CREATE]:'Creating task...',[LoadingTypes.TASK_UPDATE]:'Updating task...',[LoadingTypes.TASK_DELETE]:'Deleting task...',[LoadingTypes.TASK_TREE_FETCH]:'Loading task tree...',[LoadingTypes.TASK_STATS_FETCH]:'Loading statistics...',[LoadingTypes.AUTH_LOGIN]:'Signing in...',[LoadingTypes.AUTH_REGISTER]:'Creating account...',[LoadingTypes.AUTH_OAUTH]:'Completing authentication...',[LoadingTypes.AUTH_REFRESH]:'Refreshing session...',[LoadingTypes.GENERATE_DETAILS]:'Generating implementation details...',[LoadingTypes.DECOMPOSE_TASK]:'Decomposing task...',[LoadingTypes.EXPORT_TRELLO]:'Exporting to Trello...',[LoadingTypes.EXPORT_JSON]:'Preparing download...',[LoadingTypes.SAVE]:'Saving...',[LoadingTypes.SUBMIT]:'Submitting...',[LoadingTypes.PROCESS]:'Processing...'};return messages[type]||'Loading...';}}// Create singleton instance\nconst loadingManager=new LoadingStateManager();/**\n * Hook-like interface for React components\n */export const useLoadingState=type=>{return{setLoading:(isLoading,message)=>loadingManager.setLoading(type,isLoading,message),isLoading:loadingManager.getLoading(type).isLoading,message:loadingManager.getLoading(type).message};};/**\n * Wrapper for async operations with automatic loading state management\n */export const withLoading=async function(type,asyncOperation){let customMessage=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;loadingManager.setLoading(type,true,customMessage);try{const result=await asyncOperation();return result;}finally{loadingManager.setLoading(type,false);}};/**\n * Export the manager instance for direct access\n */export default loadingManager;","map":{"version":3,"names":["LoadingTypes","TASKS_FETCH","TASK_CREATE","TASK_UPDATE","TASK_DELETE","TASK_TREE_FETCH","TASK_STATS_FETCH","AUTH_LOGIN","AUTH_REGISTER","AUTH_OAUTH","AUTH_REFRESH","GENERATE_DETAILS","DECOMPOSE_TASK","EXPORT_TRELLO","EXPORT_JSON","SAVE","SUBMIT","PROCESS","LoadingStateManager","constructor","loadingStates","Map","subscribers","Set","setLoading","type","isLoading","message","arguments","length","undefined","currentState","get","newState","getDefaultMessage","timestamp","Date","now","set","notifySubscribers","getLoading","isAnyLoading","Array","from","values","some","state","getActiveLoadings","active","forEach","push","clearAll","clear","cleared","subscribe","callback","add","delete","error","console","messages","loadingManager","useLoadingState","withLoading","asyncOperation","customMessage","result"],"sources":["/app/src/services/loadingService.js"],"sourcesContent":["/**\n * Centralized loading state management service\n */\n\n/**\n * Loading state types for different operations\n */\nexport const LoadingTypes = {\n  // Task operations\n  TASKS_FETCH: 'tasks_fetch',\n  TASK_CREATE: 'task_create',\n  TASK_UPDATE: 'task_update',\n  TASK_DELETE: 'task_delete',\n  TASK_TREE_FETCH: 'task_tree_fetch',\n  TASK_STATS_FETCH: 'task_stats_fetch',\n  \n  // Authentication operations\n  AUTH_LOGIN: 'auth_login',\n  AUTH_REGISTER: 'auth_register',\n  AUTH_OAUTH: 'auth_oauth',\n  AUTH_REFRESH: 'auth_refresh',\n  \n  // Content generation\n  GENERATE_DETAILS: 'generate_details',\n  DECOMPOSE_TASK: 'decompose_task',\n  \n  // Export operations\n  EXPORT_TRELLO: 'export_trello',\n  EXPORT_JSON: 'export_json',\n  \n  // General operations\n  SAVE: 'save',\n  SUBMIT: 'submit',\n  PROCESS: 'process'\n};\n\n/**\n * Loading state manager class\n */\nclass LoadingStateManager {\n  constructor() {\n    this.loadingStates = new Map();\n    this.subscribers = new Set();\n  }\n\n  /**\n   * Set loading state for a specific operation\n   */\n  setLoading(type, isLoading, message = null) {\n    const currentState = this.loadingStates.get(type) || {};\n    const newState = {\n      ...currentState,\n      isLoading,\n      message: isLoading ? (message || this.getDefaultMessage(type)) : null,\n      timestamp: Date.now()\n    };\n\n    this.loadingStates.set(type, newState);\n    this.notifySubscribers(type, newState);\n  }\n\n  /**\n   * Get loading state for a specific operation\n   */\n  getLoading(type) {\n    return this.loadingStates.get(type) || { isLoading: false, message: null };\n  }\n\n  /**\n   * Check if any loading operation is active\n   */\n  isAnyLoading() {\n    return Array.from(this.loadingStates.values()).some(state => state.isLoading);\n  }\n\n  /**\n   * Get all active loading operations\n   */\n  getActiveLoadings() {\n    const active = [];\n    this.loadingStates.forEach((state, type) => {\n      if (state.isLoading) {\n        active.push({ type, ...state });\n      }\n    });\n    return active;\n  }\n\n  /**\n   * Clear all loading states\n   */\n  clearAll() {\n    this.loadingStates.clear();\n    this.notifySubscribers('*', { cleared: true });\n  }\n\n  /**\n   * Subscribe to loading state changes\n   */\n  subscribe(callback) {\n    this.subscribers.add(callback);\n    return () => this.subscribers.delete(callback);\n  }\n\n  /**\n   * Notify all subscribers of state changes\n   */\n  notifySubscribers(type, state) {\n    this.subscribers.forEach(callback => {\n      try {\n        callback(type, state);\n      } catch (error) {\n        console.error('Error in loading state subscriber:', error);\n      }\n    });\n  }\n\n  /**\n   * Get default loading message for operation type\n   */\n  getDefaultMessage(type) {\n    const messages = {\n      [LoadingTypes.TASKS_FETCH]: 'Loading tasks...',\n      [LoadingTypes.TASK_CREATE]: 'Creating task...',\n      [LoadingTypes.TASK_UPDATE]: 'Updating task...',\n      [LoadingTypes.TASK_DELETE]: 'Deleting task...',\n      [LoadingTypes.TASK_TREE_FETCH]: 'Loading task tree...',\n      [LoadingTypes.TASK_STATS_FETCH]: 'Loading statistics...',\n      [LoadingTypes.AUTH_LOGIN]: 'Signing in...',\n      [LoadingTypes.AUTH_REGISTER]: 'Creating account...',\n      [LoadingTypes.AUTH_OAUTH]: 'Completing authentication...',\n      [LoadingTypes.AUTH_REFRESH]: 'Refreshing session...',\n      [LoadingTypes.GENERATE_DETAILS]: 'Generating implementation details...',\n      [LoadingTypes.DECOMPOSE_TASK]: 'Decomposing task...',\n      [LoadingTypes.EXPORT_TRELLO]: 'Exporting to Trello...',\n      [LoadingTypes.EXPORT_JSON]: 'Preparing download...',\n      [LoadingTypes.SAVE]: 'Saving...',\n      [LoadingTypes.SUBMIT]: 'Submitting...',\n      [LoadingTypes.PROCESS]: 'Processing...'\n    };\n\n    return messages[type] || 'Loading...';\n  }\n}\n\n// Create singleton instance\nconst loadingManager = new LoadingStateManager();\n\n/**\n * Hook-like interface for React components\n */\nexport const useLoadingState = (type) => {\n  return {\n    setLoading: (isLoading, message) => loadingManager.setLoading(type, isLoading, message),\n    isLoading: loadingManager.getLoading(type).isLoading,\n    message: loadingManager.getLoading(type).message\n  };\n};\n\n/**\n * Wrapper for async operations with automatic loading state management\n */\nexport const withLoading = async (type, asyncOperation, customMessage = null) => {\n  loadingManager.setLoading(type, true, customMessage);\n  \n  try {\n    const result = await asyncOperation();\n    return result;\n  } finally {\n    loadingManager.setLoading(type, false);\n  }\n};\n\n/**\n * Export the manager instance for direct access\n */\nexport default loadingManager;"],"mappings":"AAAA;AACA;AACA,GAEA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,YAAY,CAAG,CAC1B;AACAC,WAAW,CAAE,aAAa,CAC1BC,WAAW,CAAE,aAAa,CAC1BC,WAAW,CAAE,aAAa,CAC1BC,WAAW,CAAE,aAAa,CAC1BC,eAAe,CAAE,iBAAiB,CAClCC,gBAAgB,CAAE,kBAAkB,CAEpC;AACAC,UAAU,CAAE,YAAY,CACxBC,aAAa,CAAE,eAAe,CAC9BC,UAAU,CAAE,YAAY,CACxBC,YAAY,CAAE,cAAc,CAE5B;AACAC,gBAAgB,CAAE,kBAAkB,CACpCC,cAAc,CAAE,gBAAgB,CAEhC;AACAC,aAAa,CAAE,eAAe,CAC9BC,WAAW,CAAE,aAAa,CAE1B;AACAC,IAAI,CAAE,MAAM,CACZC,MAAM,CAAE,QAAQ,CAChBC,OAAO,CAAE,SACX,CAAC,CAED;AACA;AACA,GACA,KAAM,CAAAC,mBAAoB,CACxBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,aAAa,CAAG,GAAI,CAAAC,GAAG,CAAC,CAAC,CAC9B,IAAI,CAACC,WAAW,CAAG,GAAI,CAAAC,GAAG,CAAC,CAAC,CAC9B,CAEA;AACF;AACA,KACEC,UAAUA,CAACC,IAAI,CAAEC,SAAS,CAAkB,IAAhB,CAAAC,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACxC,KAAM,CAAAG,YAAY,CAAG,IAAI,CAACX,aAAa,CAACY,GAAG,CAACP,IAAI,CAAC,EAAI,CAAC,CAAC,CACvD,KAAM,CAAAQ,QAAQ,CAAG,CACf,GAAGF,YAAY,CACfL,SAAS,CACTC,OAAO,CAAED,SAAS,CAAIC,OAAO,EAAI,IAAI,CAACO,iBAAiB,CAACT,IAAI,CAAC,CAAI,IAAI,CACrEU,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CACtB,CAAC,CAED,IAAI,CAACjB,aAAa,CAACkB,GAAG,CAACb,IAAI,CAAEQ,QAAQ,CAAC,CACtC,IAAI,CAACM,iBAAiB,CAACd,IAAI,CAAEQ,QAAQ,CAAC,CACxC,CAEA;AACF;AACA,KACEO,UAAUA,CAACf,IAAI,CAAE,CACf,MAAO,KAAI,CAACL,aAAa,CAACY,GAAG,CAACP,IAAI,CAAC,EAAI,CAAEC,SAAS,CAAE,KAAK,CAAEC,OAAO,CAAE,IAAK,CAAC,CAC5E,CAEA;AACF;AACA,KACEc,YAAYA,CAAA,CAAG,CACb,MAAO,CAAAC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACvB,aAAa,CAACwB,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,KAAK,EAAIA,KAAK,CAACpB,SAAS,CAAC,CAC/E,CAEA;AACF;AACA,KACEqB,iBAAiBA,CAAA,CAAG,CAClB,KAAM,CAAAC,MAAM,CAAG,EAAE,CACjB,IAAI,CAAC5B,aAAa,CAAC6B,OAAO,CAAC,CAACH,KAAK,CAAErB,IAAI,GAAK,CAC1C,GAAIqB,KAAK,CAACpB,SAAS,CAAE,CACnBsB,MAAM,CAACE,IAAI,CAAC,CAAEzB,IAAI,CAAE,GAAGqB,KAAM,CAAC,CAAC,CACjC,CACF,CAAC,CAAC,CACF,MAAO,CAAAE,MAAM,CACf,CAEA;AACF;AACA,KACEG,QAAQA,CAAA,CAAG,CACT,IAAI,CAAC/B,aAAa,CAACgC,KAAK,CAAC,CAAC,CAC1B,IAAI,CAACb,iBAAiB,CAAC,GAAG,CAAE,CAAEc,OAAO,CAAE,IAAK,CAAC,CAAC,CAChD,CAEA;AACF;AACA,KACEC,SAASA,CAACC,QAAQ,CAAE,CAClB,IAAI,CAACjC,WAAW,CAACkC,GAAG,CAACD,QAAQ,CAAC,CAC9B,MAAO,IAAM,IAAI,CAACjC,WAAW,CAACmC,MAAM,CAACF,QAAQ,CAAC,CAChD,CAEA;AACF;AACA,KACEhB,iBAAiBA,CAACd,IAAI,CAAEqB,KAAK,CAAE,CAC7B,IAAI,CAACxB,WAAW,CAAC2B,OAAO,CAACM,QAAQ,EAAI,CACnC,GAAI,CACFA,QAAQ,CAAC9B,IAAI,CAAEqB,KAAK,CAAC,CACvB,CAAE,MAAOY,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAAC,CAC5D,CACF,CAAC,CAAC,CACJ,CAEA;AACF;AACA,KACExB,iBAAiBA,CAACT,IAAI,CAAE,CACtB,KAAM,CAAAmC,QAAQ,CAAG,CACf,CAAC5D,YAAY,CAACC,WAAW,EAAG,kBAAkB,CAC9C,CAACD,YAAY,CAACE,WAAW,EAAG,kBAAkB,CAC9C,CAACF,YAAY,CAACG,WAAW,EAAG,kBAAkB,CAC9C,CAACH,YAAY,CAACI,WAAW,EAAG,kBAAkB,CAC9C,CAACJ,YAAY,CAACK,eAAe,EAAG,sBAAsB,CACtD,CAACL,YAAY,CAACM,gBAAgB,EAAG,uBAAuB,CACxD,CAACN,YAAY,CAACO,UAAU,EAAG,eAAe,CAC1C,CAACP,YAAY,CAACQ,aAAa,EAAG,qBAAqB,CACnD,CAACR,YAAY,CAACS,UAAU,EAAG,8BAA8B,CACzD,CAACT,YAAY,CAACU,YAAY,EAAG,uBAAuB,CACpD,CAACV,YAAY,CAACW,gBAAgB,EAAG,sCAAsC,CACvE,CAACX,YAAY,CAACY,cAAc,EAAG,qBAAqB,CACpD,CAACZ,YAAY,CAACa,aAAa,EAAG,wBAAwB,CACtD,CAACb,YAAY,CAACc,WAAW,EAAG,uBAAuB,CACnD,CAACd,YAAY,CAACe,IAAI,EAAG,WAAW,CAChC,CAACf,YAAY,CAACgB,MAAM,EAAG,eAAe,CACtC,CAAChB,YAAY,CAACiB,OAAO,EAAG,eAC1B,CAAC,CAED,MAAO,CAAA2C,QAAQ,CAACnC,IAAI,CAAC,EAAI,YAAY,CACvC,CACF,CAEA;AACA,KAAM,CAAAoC,cAAc,CAAG,GAAI,CAAA3C,mBAAmB,CAAC,CAAC,CAEhD;AACA;AACA,GACA,MAAO,MAAM,CAAA4C,eAAe,CAAIrC,IAAI,EAAK,CACvC,MAAO,CACLD,UAAU,CAAEA,CAACE,SAAS,CAAEC,OAAO,GAAKkC,cAAc,CAACrC,UAAU,CAACC,IAAI,CAAEC,SAAS,CAAEC,OAAO,CAAC,CACvFD,SAAS,CAAEmC,cAAc,CAACrB,UAAU,CAACf,IAAI,CAAC,CAACC,SAAS,CACpDC,OAAO,CAAEkC,cAAc,CAACrB,UAAU,CAACf,IAAI,CAAC,CAACE,OAC3C,CAAC,CACH,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAoC,WAAW,CAAG,cAAAA,CAAOtC,IAAI,CAAEuC,cAAc,CAA2B,IAAzB,CAAAC,aAAa,CAAArC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAC1EiC,cAAc,CAACrC,UAAU,CAACC,IAAI,CAAE,IAAI,CAAEwC,aAAa,CAAC,CAEpD,GAAI,CACF,KAAM,CAAAC,MAAM,CAAG,KAAM,CAAAF,cAAc,CAAC,CAAC,CACrC,MAAO,CAAAE,MAAM,CACf,CAAC,OAAS,CACRL,cAAc,CAACrC,UAAU,CAACC,IAAI,CAAE,KAAK,CAAC,CACxC,CACF,CAAC,CAED;AACA;AACA,GACA,cAAe,CAAAoC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}