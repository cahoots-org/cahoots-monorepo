{"ast":null,"code":"import React,{createContext,useContext,useEffect}from'react';import{useSettings}from'./SettingsContext';import{useAuth}from'./AuthContext';import{tokens}from'../design-system/tokens';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext();// Light theme color overrides\nconst lightTheme={bg:'#FFFFFF',surface:'#F8F9FA',border:'#D1D5DB',// More visible border for light theme\ntext:'#111827',muted:'#6B7280',body:'#374151'};// Dark theme (default from tokens)\nconst darkTheme={bg:tokens.colors.dark.bg,surface:tokens.colors.dark.surface,border:tokens.colors.dark.border,text:tokens.colors.dark.text,muted:tokens.colors.dark.muted,body:tokens.colors.dark.text};export const ThemeProvider=_ref=>{let{children}=_ref;const{settings,settingsLoaded}=useSettings();const{isAuthenticated,loading}=useAuth();// For unauthenticated users, always use light mode\n// Wait for both auth and settings to finish loading before applying theme\nconst shouldUseDarkMode=!loading&&settingsLoaded&&isAuthenticated()&&settings.darkMode;useEffect(()=>{// Apply theme to CSS custom properties\nconst theme=shouldUseDarkMode?darkTheme:lightTheme;const root=document.documentElement;// Update CSS custom properties\nroot.style.setProperty('--color-bg',theme.bg);root.style.setProperty('--color-surface',theme.surface);root.style.setProperty('--color-border',theme.border);root.style.setProperty('--color-text',theme.text);root.style.setProperty('--color-text-muted',theme.muted);root.style.setProperty('--color-text-body',theme.body);// Update body background\ndocument.body.style.backgroundColor=theme.bg;document.body.style.color=theme.text;// Add/remove dark theme class\nif(shouldUseDarkMode){document.documentElement.classList.add('dark-theme');document.documentElement.classList.remove('light-theme');}else{document.documentElement.classList.add('light-theme');document.documentElement.classList.remove('dark-theme');}},[shouldUseDarkMode]);const contextValue={isDark:shouldUseDarkMode,theme:shouldUseDarkMode?darkTheme:lightTheme};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:contextValue,children:children});};export const useTheme=()=>{const context=useContext(ThemeContext);if(!context){throw new Error('useTheme must be used within a ThemeProvider');}return context;};export default ThemeContext;","map":{"version":3,"names":["React","createContext","useContext","useEffect","useSettings","useAuth","tokens","jsx","_jsx","ThemeContext","lightTheme","bg","surface","border","text","muted","body","darkTheme","colors","dark","ThemeProvider","_ref","children","settings","settingsLoaded","isAuthenticated","loading","shouldUseDarkMode","darkMode","theme","root","document","documentElement","style","setProperty","backgroundColor","color","classList","add","remove","contextValue","isDark","Provider","value","useTheme","context","Error"],"sources":["/app/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect } from 'react';\nimport { useSettings } from './SettingsContext';\nimport { useAuth } from './AuthContext';\nimport { tokens } from '../design-system/tokens';\n\nconst ThemeContext = createContext();\n\n// Light theme color overrides\nconst lightTheme = {\n  bg: '#FFFFFF',\n  surface: '#F8F9FA',\n  border: '#D1D5DB',  // More visible border for light theme\n  text: '#111827',\n  muted: '#6B7280',\n  body: '#374151',\n};\n\n// Dark theme (default from tokens)\nconst darkTheme = {\n  bg: tokens.colors.dark.bg,\n  surface: tokens.colors.dark.surface,\n  border: tokens.colors.dark.border,\n  text: tokens.colors.dark.text,\n  muted: tokens.colors.dark.muted,\n  body: tokens.colors.dark.text,\n};\n\nexport const ThemeProvider = ({ children }) => {\n  const { settings, settingsLoaded } = useSettings();\n  const { isAuthenticated, loading } = useAuth();\n  \n  // For unauthenticated users, always use light mode\n  // Wait for both auth and settings to finish loading before applying theme\n  const shouldUseDarkMode = !loading && settingsLoaded && isAuthenticated() && settings.darkMode;\n\n  useEffect(() => {\n    // Apply theme to CSS custom properties\n    const theme = shouldUseDarkMode ? darkTheme : lightTheme;\n    const root = document.documentElement;\n\n    // Update CSS custom properties\n    root.style.setProperty('--color-bg', theme.bg);\n    root.style.setProperty('--color-surface', theme.surface);\n    root.style.setProperty('--color-border', theme.border);\n    root.style.setProperty('--color-text', theme.text);\n    root.style.setProperty('--color-text-muted', theme.muted);\n    root.style.setProperty('--color-text-body', theme.body);\n\n    // Update body background\n    document.body.style.backgroundColor = theme.bg;\n    document.body.style.color = theme.text;\n\n    // Add/remove dark theme class\n    if (shouldUseDarkMode) {\n      document.documentElement.classList.add('dark-theme');\n      document.documentElement.classList.remove('light-theme');\n    } else {\n      document.documentElement.classList.add('light-theme');\n      document.documentElement.classList.remove('dark-theme');\n    }\n  }, [shouldUseDarkMode]);\n\n  const contextValue = {\n    isDark: shouldUseDarkMode,\n    theme: shouldUseDarkMode ? darkTheme : lightTheme,\n  };\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\nexport default ThemeContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}