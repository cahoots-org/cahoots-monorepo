apiVersion: apps/v1
kind: Deployment
metadata:
  name: master
  namespace: cahoots
spec:
  selector:
    matchLabels:
      app: master
  replicas: 1
  template:
    metadata:
      labels:
        app: master
    spec:
      imagePullSecrets:
      - name: ghcr-auth
      initContainers:
      - name: wait-for-postgres
        image: postgres:15
        command: ['sh', '-c', 
          'until pg_isready -h db -p 5432 -U $POSTGRES_USER; do echo waiting for postgres; sleep 2; done;']
        envFrom:
        - configMapRef:
            name: postgres-config
        - secretRef:
            name: postgres-secret
      containers:
      - name: master
        image: ghcr.io/cahoots-org/master:latest
        envFrom:
        - configMapRef:
            name: redis-config
        - configMapRef:
            name: postgres-config
        - secretRef:
            name: postgres-secret
        env:
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@db:5432/$(POSTGRES_DB)"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: PYTHONPATH
          value: "/app"
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        ports:
        - containerPort: 8000
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12
---
apiVersion: v1
kind: Service
metadata:
  name: master
  namespace: cahoots
spec:
  selector:
    app: master
  ports:
  - port: 80
    targetPort: 8000
  type: ClusterIP 