"""add_audit_logs_table

Revision ID: 16a67d330dc5
Revises: 20240115_initial
Create Date: 2025-01-06 12:18:30.543942+00:00

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "16a67d330dc5"
down_revision: Union[str, None] = "20240115_initial"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "subscription_tiers",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("price_monthly", sa.Float(), nullable=False),
        sa.Column("price_yearly", sa.Float(), nullable=False),
        sa.Column("features", sa.JSON(), nullable=True),
        sa.Column("limits", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "payment_methods",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("organization_id", sa.UUID(), nullable=False),
        sa.Column("stripe_payment_method_id", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("card_last4", sa.String(), nullable=True),
        sa.Column("card_brand", sa.String(), nullable=True),
        sa.Column("is_default", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organizations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_table("user_organizations")
    op.add_column(
        "audit_logs", sa.Column("description", sa.String(), nullable=True)
    )
    op.add_column("audit_logs", sa.Column("changes", sa.JSON(), nullable=True))
    op.add_column(
        "audit_logs", sa.Column("event_metadata", sa.JSON(), nullable=True)
    )
    op.drop_constraint(
        "audit_logs_organization_id_fkey", "audit_logs", type_="foreignkey"
    )
    op.drop_constraint(
        "audit_logs_user_id_fkey", "audit_logs", type_="foreignkey"
    )
    op.create_foreign_key(None, "audit_logs", "users", ["user_id"], ["id"])
    op.create_foreign_key(
        None, "audit_logs", "organizations", ["organization_id"], ["id"]
    )
    op.drop_column("audit_logs", "status")
    op.drop_column("audit_logs", "action")
    op.drop_column("audit_logs", "details")
    op.add_column(
        "invoices", sa.Column("updated_at", sa.DateTime(), nullable=True)
    )
    op.alter_column(
        "invoices",
        "amount",
        existing_type=sa.NUMERIC(precision=10, scale=2),
        type_=sa.Float(),
        existing_nullable=False,
    )
    op.drop_constraint(
        "invoices_organization_id_fkey", "invoices", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "invoices", "organizations", ["organization_id"], ["id"]
    )
    op.add_column(
        "organizations", sa.Column("api_key", sa.String(), nullable=False)
    )
    op.add_column(
        "organizations",
        sa.Column("subscription_id", sa.String(), nullable=True),
    )
    op.add_column(
        "organizations",
        sa.Column("subscription_item_id", sa.String(), nullable=True),
    )
    op.add_column(
        "organizations", sa.Column("customer_id", sa.String(), nullable=True)
    )
    op.add_column(
        "organizations",
        sa.Column("default_payment_method_id", sa.String(), nullable=True),
    )
    op.create_unique_constraint(None, "organizations", ["api_key"])
    op.drop_column("organizations", "features")
    op.drop_column("organizations", "subscription_end_date")
    op.drop_column("organizations", "max_projects")
    op.drop_column("organizations", "max_users")
    op.drop_constraint(
        "usage_records_organization_id_fkey",
        "usage_records",
        type_="foreignkey",
    )
    op.create_foreign_key(
        None, "usage_records", "organizations", ["organization_id"], ["id"]
    )
    op.add_column(
        "users", sa.Column("organization_id", sa.UUID(), nullable=False)
    )
    op.add_column("users", sa.Column("is_admin", sa.Boolean(), nullable=True))
    op.alter_column(
        "users", "full_name", existing_type=sa.VARCHAR(), nullable=True
    )
    op.drop_index("ix_users_email", table_name="users")
    op.create_unique_constraint(None, "users", ["email"])
    op.create_foreign_key(
        None, "users", "organizations", ["organization_id"], ["id"]
    )
    op.drop_column("users", "preferences")
    op.drop_column("users", "last_login")
    op.drop_column("users", "is_verified")
    op.drop_column("users", "hashed_password")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users",
        sa.Column(
            "hashed_password",
            sa.VARCHAR(),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "users",
        sa.Column(
            "is_verified",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "users",
        sa.Column(
            "last_login",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "users",
        sa.Column(
            "preferences",
            postgresql.JSON(astext_type=sa.Text()),
            server_default=sa.text("'{}'::json"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "users", type_="foreignkey")
    op.drop_constraint(None, "users", type_="unique")
    op.create_index("ix_users_email", "users", ["email"], unique=True)
    op.alter_column(
        "users", "full_name", existing_type=sa.VARCHAR(), nullable=False
    )
    op.drop_column("users", "is_admin")
    op.drop_column("users", "organization_id")
    op.drop_constraint(None, "usage_records", type_="foreignkey")
    op.create_foreign_key(
        "usage_records_organization_id_fkey",
        "usage_records",
        "organizations",
        ["organization_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.add_column(
        "organizations",
        sa.Column(
            "max_users",
            sa.INTEGER(),
            server_default=sa.text("5"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "organizations",
        sa.Column(
            "max_projects",
            sa.INTEGER(),
            server_default=sa.text("3"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "organizations",
        sa.Column(
            "subscription_end_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "organizations",
        sa.Column(
            "features",
            postgresql.JSON(astext_type=sa.Text()),
            server_default=sa.text("'{}'::json"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "organizations", type_="unique")
    op.drop_column("organizations", "default_payment_method_id")
    op.drop_column("organizations", "customer_id")
    op.drop_column("organizations", "subscription_item_id")
    op.drop_column("organizations", "subscription_id")
    op.drop_column("organizations", "api_key")
    op.drop_constraint(None, "invoices", type_="foreignkey")
    op.create_foreign_key(
        "invoices_organization_id_fkey",
        "invoices",
        "organizations",
        ["organization_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "invoices",
        "amount",
        existing_type=sa.Float(),
        type_=sa.NUMERIC(precision=10, scale=2),
        existing_nullable=False,
    )
    op.drop_column("invoices", "updated_at")
    op.add_column(
        "audit_logs",
        sa.Column(
            "details",
            postgresql.JSON(astext_type=sa.Text()),
            server_default=sa.text("'{}'::json"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "audit_logs",
        sa.Column("action", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "audit_logs",
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "audit_logs", type_="foreignkey")
    op.drop_constraint(None, "audit_logs", type_="foreignkey")
    op.create_foreign_key(
        "audit_logs_user_id_fkey",
        "audit_logs",
        "users",
        ["user_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        "audit_logs_organization_id_fkey",
        "audit_logs",
        "organizations",
        ["organization_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_column("audit_logs", "event_metadata")
    op.drop_column("audit_logs", "changes")
    op.drop_column("audit_logs", "description")
    op.create_table(
        "user_organizations",
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "organization_id", sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column("role", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "permissions",
            postgresql.JSON(astext_type=sa.Text()),
            server_default=sa.text("'[]'::json"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organizations.id"],
            name="user_organizations_organization_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="user_organizations_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "user_id", "organization_id", name="user_organizations_pkey"
        ),
    )
    op.drop_table("payment_methods")
    op.drop_table("subscription_tiers")
    # ### end Alembic commands ###
