openapi: 3.0.3
info:
  title: Cahoots API
  description: API for Cahoots AI Development Team Platform
  version: 0.1.0

servers:
  - url: http://localhost:8000
    description: Local development server
  - url: https://api.cahoots.ai
    description: Production server

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    UserRegistration:
      type: object
      required:
        - email
        - password
        - full_name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        full_name:
          type: string

    PasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    PasswordReset:
      type: object
      required:
        - token
        - new_password
      properties:
        token:
          type: string
        new_password:
          type: string
          format: password
          minLength: 8

    MemberInvite:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          default: member
          enum: [admin, member]

    MemberUpdate:
      type: object
      required:
        - role
      properties:
        role:
          type: string
          enum: [admin, member]

    MemberResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        full_name:
          type: string
        role:
          type: string
        is_active:
          type: boolean

    ServiceHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        latency_ms:
          type: number
          format: float
        details:
          type: object
          additionalProperties: true

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        database:
          type: string
          enum: [connected, error, unknown]
        redis:
          type: string
          enum: [connected, error, unknown]
        event_system:
          type: string
          enum: [connected, error, unknown]
        services:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ServiceHealth'

    ProjectCreate:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string

    ProjectUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
        agent_config:
          type: object
        resource_limits:
          type: object

    ProjectResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        status:
          type: string
        links:
          type: object
          properties:
            self:
              type: string
            github:
              type: string
            docs:
              type: string
            monitoring:
              type: string
            logging:
              type: string

    ProjectsResponse:
      type: object
      properties:
        total:
          type: integer
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectResponse'

    AgentConfig:
      type: object
      required:
        - agent_type
        - config
      properties:
        agent_type:
          type: string
        config:
          type: object
          additionalProperties: true

    AgentDeployment:
      type: object
      properties:
        agent_type:
          type: string
        status:
          type: object
          additionalProperties: true

    SubscriptionResponse:
      type: object
      properties:
        id:
          type: string
        customer_id:
          type: string
        price_id:
          type: string
        status:
          type: string
        current_period_end:
          type: string
          format: date-time
        cancel_at_period_end:
          type: boolean

    PaymentMethodResponse:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        card:
          type: object
          properties:
            brand:
              type: string
            last4:
              type: string
            exp_month:
              type: integer
            exp_year:
              type: integer

    InvoiceResponse:
      type: object
      properties:
        id:
          type: string
        customer_id:
          type: string
        amount_due:
          type: integer
        amount_paid:
          type: integer
        status:
          type: string
        created:
          type: string
          format: date-time
        due_date:
          type: string
          format: date-time

    UsageResponse:
      type: object
      properties:
        subscription_id:
          type: string
        period_start:
          type: string
          format: date-time
        period_end:
          type: string
          format: date-time
        total_usage:
          type: integer

    WebhookResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string

    ErrorResponse:
      type: object
      properties:
        detail:
          type: string

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8

    TokenResponse:
      type: object
      required:
        - access_token
        - refresh_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
          enum: [bearer]
        expires_in:
          type: integer
          description: Token expiration time in seconds

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    ChangePasswordRequest:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
          format: password
        new_password:
          type: string
          format: password
          minLength: 8

    SocialAuthRequest:
      type: object
      required:
        - provider
        - code
      properties:
        provider:
          type: string
          enum: [google, github]
        code:
          type: string
        state:
          type: string

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid request or email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify-email/{token}:
    post:
      tags:
        - Authentication
      summary: Verify user email
      operationId: verifyEmail
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Invalid verification token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password reset email sent if account exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password with token
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Invalid reset token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login with email and password
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Account inactive or unverified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout and revoke tokens
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change password while logged in
      operationId: changePassword
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Invalid current password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/social/{provider}:
    parameters:
      - name: provider
        in: path
        required: true
        schema:
          type: string
          enum: [google, github]
    post:
      tags:
        - Authentication
      summary: Authenticate with social provider
      operationId: socialAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialAuthRequest'
      responses:
        '200':
          description: Social authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid social auth code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Social authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/{organization_id}/members:
    parameters:
      - name: organization_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Organizations
      summary: List organization members
      operationId: listMembers
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: List of organization members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberResponse'
        '403':
          description: Invalid or missing API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/{organization_id}/members/invite:
    parameters:
      - name: organization_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Organizations
      summary: Invite member to organization
      operationId: inviteMember
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberInvite'
      responses:
        '201':
          description: Invitation sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: User is already a member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid or missing API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /organizations/{organization_id}/members/{user_id}:
    parameters:
      - name: organization_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: user_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    patch:
      tags:
        - Organizations
      summary: Update member role
      operationId: updateMember
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberUpdate'
      responses:
        '200':
          description: Member role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberResponse'
        '404':
          description: User not found or not a member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Organizations
      summary: Remove member from organization
      operationId: removeMember
      security:
        - ApiKeyAuth: []
      responses:
        '204':
          description: Member removed successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health:
    get:
      tags:
        - System
      summary: Check system health
      operationId: healthCheck
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /metrics:
    get:
      tags:
        - System
      summary: Get system metrics
      operationId: getMetrics
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain:
              schema:
                type: string
        '403':
          description: Invalid or missing API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/projects:
    post:
      tags:
        - Projects
      summary: Create a new project
      operationId: createProject
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '402':
          description: Project limit reached for subscription tier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Projects
      summary: List all projects
      operationId: listProjects
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsResponse'

  /api/projects/{project_id}:
    parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Projects
      summary: Get project details
      operationId: getProject
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Projects
      summary: Update project
      operationId: updateProject
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Projects
      summary: Delete project
      operationId: deleteProject
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/projects/{project_id}/agents:
    parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Projects
      summary: Deploy an agent
      operationId: deployAgent
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentConfig'
      responses:
        '200':
          description: Agent deployed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentDeployment'
        '402':
          description: Agent limit reached for subscription tier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/projects/{project_id}/agents/{agent_type}/scale:
    parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: agent_type
        in: path
        required: true
        schema:
          type: string
      - name: replicas
        in: query
        required: true
        schema:
          type: integer
          minimum: 0
    patch:
      tags:
        - Projects
      summary: Scale agent deployment
      operationId: scaleAgent
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Agent scaled successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /billing/subscriptions/{subscription_id}:
    parameters:
      - name: subscription_id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Billing
      summary: Get subscription details
      operationId: getSubscription
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Subscription details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
    patch:
      tags:
        - Billing
      summary: Update subscription
      operationId: updateSubscription
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - price_id
              properties:
                price_id:
                  type: string
      responses:
        '200':
          description: Subscription updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
    delete:
      tags:
        - Billing
      summary: Cancel subscription
      operationId: cancelSubscription
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Subscription cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'

  /billing/payment-methods:
    get:
      tags:
        - Billing
      summary: List payment methods
      operationId: listPaymentMethods
      security:
        - ApiKeyAuth: []
      parameters:
        - name: customer_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethodResponse'
    post:
      tags:
        - Billing
      summary: Add payment method
      operationId: addPaymentMethod
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - payment_method_id
                - customer_id
              properties:
                payment_method_id:
                  type: string
                customer_id:
                  type: string
      responses:
        '200':
          description: Payment method added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodResponse'

  /billing/payment-methods/{payment_method_id}:
    parameters:
      - name: payment_method_id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - Billing
      summary: Remove payment method
      operationId: removePaymentMethod
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Payment method removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean

  /billing/invoices:
    get:
      tags:
        - Billing
      summary: List invoices
      operationId: listInvoices
      security:
        - ApiKeyAuth: []
      parameters:
        - name: customer_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of invoices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceResponse'

  /billing/invoices/{invoice_id}:
    parameters:
      - name: invoice_id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Billing
      summary: Get invoice details
      operationId: getInvoice
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Invoice details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'

  /billing/invoices/{invoice_id}/pay:
    parameters:
      - name: invoice_id
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Billing
      summary: Pay invoice
      operationId: payInvoice
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Invoice paid successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'

  /billing/usage/{subscription_id}:
    parameters:
      - name: subscription_id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Billing
      summary: Get subscription usage
      operationId: getUsage
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Subscription usage details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'

  /webhooks/stripe:
    post:
      tags:
        - Webhooks
      summary: Handle Stripe webhook events
      operationId: stripeWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          description: Invalid webhook payload or signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 