# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"
  AWS_REGION: us-west-2
  ECR_REPOSITORY: cahoots
  ECS_CLUSTER: cahoots-cluster
  TERRAFORM_VERSION: 1.5.0

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [core, events, context, service, agents]
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      # Cache dependencies based on requirements files
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install pip==23.3.2
          python -m pip install -r requirements.txt
          
          # Install all packages in editable mode
          pip install -e "./packages/core[test]"
          pip install -e "./packages/events[test]"
          pip install -e "./packages/context[test]"
          pip install -e "./packages/service[test]"
          pip install -e "./packages/agents[test]"

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}/packages/${{ matrix.package }}/src
          ENV: test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          API_KEY: test-key
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd packages/${{ matrix.package }}
          python -m pytest --cov=src --cov-report=xml --cov-report=term --cov-fail-under=10
          cp .coverage ../coverage.${{ matrix.package }}

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.package }}
          path: |
            packages/${{ matrix.package }}/coverage.xml
            packages/coverage.${{ matrix.package }}

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install pip==23.3.2
          python -m pip install black isort pylint

      - name: Run Black
        run: black --config pyproject.toml .

      - name: Run isort
        run: isort --settings-path pyproject.toml .

      - name: Run Pylint
        run: pylint --rcfile pyproject.toml packages/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit
        run: bandit -r packages/ -c .bandit -lll

      - name: Run Safety Check
        run: safety check

  build:
    name: Build and Push Images
    needs: [test, lint, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build and push all services
          services=("master" "project_manager" "developer" "ux_designer" "tester" "context_manager")
          for service in "${services[@]}"; do
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$service-latest -f docker/$service/Dockerfile .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$service-latest
          done

  deploy-staging:
    name: Deploy to Staging
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.aidevteam.com
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="environment/staging.tfbackend"

      - name: Terraform Plan
        run: |
          cd terraform
          terraform workspace select staging || terraform workspace new staging
          terraform plan -var-file="environment/staging.tfvars" -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Update ECS services
        run: |
          for service in master project_manager developer ux_designer tester context_manager; do
            aws ecs update-service \
              --cluster $ECS_CLUSTER-staging \
              --service $ECR_REPOSITORY-$service \
              --force-new-deployment
          done

  deploy-production:
    name: Deploy to Production
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.aidevteam.com
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="environment/production.tfbackend"

      - name: Terraform Plan
        run: |
          cd terraform
          terraform workspace select production || terraform workspace new production
          terraform plan -var-file="environment/production.tfvars" -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Update ECS services
        run: |
          for service in master project_manager developer ux_designer tester context_manager; do
            aws ecs update-service \
              --cluster $ECS_CLUSTER \
              --service $ECR_REPOSITORY-$service \
              --force-new-deployment
          done

  coverage:
    name: Coverage Report
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          path: coverage-reports

      - name: Generate combined coverage
        run: |
          pip install coverage
          cd coverage-reports
          coverage combine */coverage.*
          coverage report
          coverage xml