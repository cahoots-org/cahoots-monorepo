# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"
  AWS_REGION: us-west-2
  ECR_REPOSITORY: cahoots
  ECS_CLUSTER: cahoots-cluster
  TERRAFORM_VERSION: 1.5.0

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install pip with fixed version
        run: |
          python -m pip install pip==23.3.2

      - name: Create and activate venv
        run: |
          python -m venv .venv
          echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH

      - name: Install build dependencies
        run: |
          python -m pip install hatchling
          # Install all dependencies from requirements.txt first
          python -m pip install -r requirements.txt

      - name: Create test directories
        run: |
          for pkg in core events context service agents; do
            mkdir -p packages/$pkg/tests
          done

      # Install packages in dependency order
      - name: Install core package
        working-directory: packages/core
        run: |
          # Install package dependencies first
          pip install psutil prometheus-client boto3
          pip install -e ".[test]"

      - name: Install events package
        working-directory: packages/events  
        run: |
          # Install package dependencies first
          pip install aio-pika websockets
          pip install -e ".[test]"

      - name: Install context package
        working-directory: packages/context
        run: |
          # Install package dependencies first
          pip install business-rules
          pip install -e ".[test]"

      - name: Install service package
        working-directory: packages/service
        run: |
          # Install package dependencies first
          pip install stripe PyGithub
          pip install -e ".[test]"

      - name: Install agents package
        working-directory: packages/agents
        run: |
          # Install package dependencies first
          pip install openai anthropic ast-comments astroid pylint black isort mypy
          pip install -e ".[test]"

      # Run tests for each package in their own directory
      - name: Run core tests
        working-directory: packages/core
        env:
          PYTHONPATH: ${{ github.workspace }}/packages/core/src
          ENV: test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          API_KEY: test-key
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python -m pytest --cov=src --cov-report=xml

      - name: Run events tests
        working-directory: packages/events
        env:
          PYTHONPATH: ${{ github.workspace }}/packages/events/src
          ENV: test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          API_KEY: test-key
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python -m pytest --cov=src --cov-report=xml

      - name: Run context tests
        working-directory: packages/context
        env:
          PYTHONPATH: ${{ github.workspace }}/packages/context/src
          ENV: test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          API_KEY: test-key
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python -m pytest --cov=src --cov-report=xml

      - name: Run service tests
        working-directory: packages/service
        env:
          PYTHONPATH: ${{ github.workspace }}/packages/service/src
          ENV: test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          API_KEY: test-key
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python -m pytest --cov=src --cov-report=xml

      - name: Run agents tests
        working-directory: packages/agents
        env:
          PYTHONPATH: ${{ github.workspace }}/packages/agents/src
          ENV: test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          API_KEY: test-key
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python -m pytest --cov=src --cov-report=xml

      # Combine coverage from all packages
      - name: Combine coverage
        run: |
          # Create empty coverage files for packages without tests
          for pkg in core events context service agents; do
            if [ ! -f "packages/$pkg/coverage.xml" ]; then
              cd "packages/$pkg"
              python -m pytest --cov=src --cov-report=xml || true
              cd ../..
            fi
          done
          # Combine all coverage files
          python -m coverage combine packages/*/coverage.xml
          python -m coverage xml -o coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install pip==23.3.2
          python -m pip install black isort pylint

      - name: Run Black
        run: black --config pyproject.toml .

      - name: Run isort
        run: isort --settings-path pyproject.toml .

      - name: Run Pylint
        run: pylint --rcfile pyproject.toml packages/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit
        run: bandit -r packages/

      - name: Run Safety Check
        run: safety check

  build:
    name: Build and Push Images
    needs: [test, lint, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build and push all services
          services=("master" "project_manager" "developer" "ux_designer" "tester" "context_manager")
          for service in "${services[@]}"; do
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$service-latest -f docker/$service/Dockerfile .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$service-latest
          done

  deploy-staging:
    name: Deploy to Staging
    needs: [build]
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.aidevteam.com
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="environment/staging.tfbackend"

      - name: Terraform Plan
        run: |
          cd terraform
          terraform workspace select staging || terraform workspace new staging
          terraform plan -var-file="environment/staging.tfvars" -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Update ECS services
        run: |
          for service in master project_manager developer ux_designer tester context_manager; do
            aws ecs update-service \
              --cluster $ECS_CLUSTER-staging \
              --service $ECR_REPOSITORY-$service \
              --force-new-deployment
          done

  deploy-production:
    name: Deploy to Production
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.aidevteam.com
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="environment/production.tfbackend"

      - name: Terraform Plan
        run: |
          cd terraform
          terraform workspace select production || terraform workspace new production
          terraform plan -var-file="environment/production.tfvars" -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Update ECS services
        run: |
          for service in master project_manager developer ux_designer tester context_manager; do
            aws ecs update-service \
              --cluster $ECS_CLUSTER \
              --service $ECR_REPOSITORY-$service \
              --force-new-deployment
          done 