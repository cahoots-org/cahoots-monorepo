# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Services Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'libs/**'
      - 'services/**'
      - 'docker/**'
      - 'k8s/**'
      - '.github/workflows/services-pipeline.yml'
      - 'requirements.txt'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with debug logging'
        type: boolean
        required: false
        default: false
      test_only:
        description: 'Run only the test job'
        type: boolean
        required: false
        default: false
      build_only:
        description: 'Run only up to the build job (no deployment)'
        type: boolean
        required: false
        default: false

# Add permissions for the workflow
permissions:
  contents: read
  packages: write

env:
  PYTHON_VERSION: "3.11"
  AWS_REGION: us-west-2
  ECR_REPOSITORY: cahoots
  ECS_CLUSTER: cahoots-cluster
  TERRAFORM_VERSION: 1.5.0
  DOCKER_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install pip==23.3.2
          python -m pip install black==24.2.0 isort==5.13.2 pylint==3.0.3 behave==1.2.6 coverage==7.3.2
          
          # Install all libraries in editable mode
          pip install -e "./libs/core[test]"
          pip install -e "./libs/events[test]"
          pip install -e "./libs/context[test]"
          pip install -e "./libs/sdlc[test]"
          
          # Install services
          pip install -e "./services/api[test]"
          pip install -e "./services/agents[test]"
          pip install -e "./services/context-manager[test]"

      - name: Run Behave tests with coverage
        run: |
          # Create .coveragerc file
          echo "[run]" > .coveragerc
          echo "source = libs,services" >> .coveragerc
          echo "omit = */tests/*,*/__pycache__/*" >> .coveragerc
          
          # Run behave with coverage
          PYTHONPATH=./libs coverage run -m behave tests/features
          
          # Generate coverage report
          coverage report
          coverage xml -o coverage.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 7
          if-no-files-found: warn  # Don't fail if no coverage file is found

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install pip==23.3.2
          python -m pip install black isort pylint

      - name: Run Black
        run: black --config pyproject.toml .

      - name: Run isort
        run: isort --settings-path pyproject.toml .

      - name: List Python files
        run: |
          echo "Listing Python files in libs directory:"
          find libs -name "*.py" | head -n 10
          echo "Listing Python files in services directory:"
          find services -name "*.py" | head -n 10

      - name: Run Pylint
        run: |
          # Temporarily disable docstring warnings
          find libs -name "*.py" | xargs pylint --rcfile=pyproject.toml --disable=missing-module-docstring,missing-class-docstring,missing-function-docstring,empty-docstring || true
          find services -name "*.py" | xargs pylint --rcfile=pyproject.toml --disable=missing-module-docstring,missing-class-docstring,missing-function-docstring,empty-docstring || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit
        run: bandit -r libs/ services/ -c .bandit -lll

      - name: Run Safety Check
        run: safety check

  build:
    name: Build and Push Images
    needs: [test, lint, security]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_only != 'true')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Debug information
        if: github.event.inputs.debug_enabled == 'true'
        run: |
          echo "Debug mode enabled"
          echo "GitHub context:"
          echo "  Actor: ${{ github.actor }}"
          echo "  Repository: ${{ github.repository }}"
          echo "  Repository Owner: ${{ github.repository_owner }}"
          echo "  Event name: ${{ github.event_name }}"
          echo "  Ref: ${{ github.ref }}"
          echo "Docker info:"
          docker info
          echo "Environment variables:"
          env | sort

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: List Docker files (diagnostic)
        run: |
          echo "Listing Docker files in the repository:"
          find docker -name "Dockerfile" -o -name "*.Dockerfile" | sort
          echo "---"

      - name: Check GitHub token permissions
        run: |
          echo "GitHub Actor: ${{ github.actor }}"
          echo "GitHub Repository: ${{ github.repository }}"
          echo "GitHub Repository Owner: ${{ github.repository_owner }}"
          echo "Token permissions should include 'packages: write'"

          echo "Checking if GitHub Container Registry is enabled for this repository..."
          echo "Note: If this fails, you may need to enable GitHub Container Registry in your organization settings."
          echo "See: https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry"
          echo "Alternative: Create a Personal Access Token (PAT) with 'write:packages' scope and add it as a secret named 'CR_PAT'"

      - name: Login to GitHub Container Registry
        run: |
          # Try using GITHUB_TOKEN first
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin || \
          # Fall back to CR_PAT if available
          (echo "GITHUB_TOKEN failed, trying CR_PAT if available..." && \
           echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin)
          # Verify login was successful
          docker info | grep Registry

      - name: Build and push base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/base/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/cahoots-base:latest
            ghcr.io/${{ github.repository_owner }}/cahoots-base:${{ github.sha }}

          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push service images
        run: |
          # Build and push all services
          # Map service names to their Dockerfile paths
          declare -A dockerfile_paths
          dockerfile_paths["master"]="docker/master/Dockerfile"
          dockerfile_paths["context_manager"]="docker/services/context-manager.Dockerfile"
          dockerfile_paths["agent"]="docker/agent/Dockerfile"
          
          # Add other services if they exist in different locations
          # Check if the service has a dedicated Dockerfile, otherwise use the agent Dockerfile
          services=("master" "project_manager" "developer" "ux_designer" "tester" "context_manager")
          for service in "${services[@]}"; do
            dockerfile_path="${dockerfile_paths[$service]:-docker/agent/Dockerfile}"
            echo "Building $service using $dockerfile_path"
            
            docker build -t ghcr.io/${{ github.repository_owner }}/cahoots-$service:latest \
                        -t ghcr.io/${{ github.repository_owner }}/cahoots-$service:${{ github.sha }} \
                        -f $dockerfile_path .
            docker push ghcr.io/${{ github.repository_owner }}/cahoots-$service:latest
            docker push ghcr.io/${{ github.repository_owner }}/cahoots-$service:${{ github.sha }}
          done

  deploy-staging:
    name: Deploy to Staging
    needs: [build]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_only != 'true' && github.event.inputs.build_only != 'true')
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.cahoots.cc
    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          chmod 600 kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Deploy to Kubernetes
        run: |
          # Update image tags in Kubernetes manifests
          services=("master" "project_manager" "developer" "ux_designer" "tester" "context_manager")
          for service in "${services[@]}"; do
            # Replace image tag in deployment
            sed -i "s|image: .*$service:.*|image: ghcr.io/${{ github.repository_owner }}/cahoots-$service:${{ github.sha }}|" k8s/base/$service.yaml
            # Apply the updated manifest
            kubectl apply -f k8s/base/$service.yaml
            # Wait for rollout
            kubectl rollout status deployment/$service -n default
          done

  deploy-production:
    name: Deploy to Production
    needs: [deploy-staging]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_only != 'true' && github.event.inputs.build_only != 'true')
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://api.cahoots.cc
    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          chmod 600 kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Deploy to Kubernetes
        run: |
          # Update image tags in Kubernetes manifests
          services=("master" "project_manager" "developer" "ux_designer" "tester" "context_manager")
          for service in "${services[@]}"; do
            # Replace image tag in deployment
            sed -i "s|image: .*$service:.*|image: ghcr.io/${{ github.repository_owner }}/cahoots-$service:${{ github.sha }}|" k8s/base/$service.yaml
            # Apply the updated manifest
            kubectl apply -f k8s/base/$service.yaml
            # Wait for rollout
            kubectl rollout status deployment/$service -n default
          done

  coverage:
    name: Coverage Report
    needs: test
    runs-on: ubuntu-latest
    continue-on-error: true  # Make this job optional
    if: always()  # Run even if previous jobs fail
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Try to download coverage reports
        id: download
        continue-on-error: true  # Don't fail if download fails
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: ./
      
      - name: Check if coverage file exists
        id: check_files
        run: |
          if [ -f "coverage.xml" ]; then
            echo "coverage_exists=true" >> $GITHUB_OUTPUT
          else
            echo "coverage_exists=false" >> $GITHUB_OUTPUT
            echo "No coverage file found. Skipping coverage report generation."
          fi

      - name: Generate coverage report
        if: steps.check_files.outputs.coverage_exists == 'true'
        run: |
          pip install coverage
          coverage report -m --rcfile=.coveragerc || echo "Could not generate report from XML file"
          echo "Coverage XML report is available at coverage.xml"