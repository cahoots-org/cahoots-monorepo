# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Services Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'libs/**'
      - 'services/**'
      - 'docker/**'
      - 'k8s/**'
      - '.github/workflows/services-pipeline.yml'
      - 'requirements.txt'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with debug logging'
        type: boolean
        required: false
        default: false
      test_only:
        description: 'Run only the test job'
        type: boolean
        required: false
        default: false
      build_only:
        description: 'Run only up to the build job (no deployment)'
        type: boolean
        required: false
        default: false

# Add permissions for the workflow
permissions:
  contents: read
  packages: write

env:
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io
  IMAGE_NAME: cahoots-org/cahoots-master
  WEB_CLIENT_IMAGE: cahoots-org/cahoots-web-client

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install pip==23.3.2
          python -m pip install black==24.2.0 isort==5.13.2 pylint==3.0.3 behave==1.2.6 coverage==7.3.2
          
          # Install all libraries in editable mode
          pip install -e "./libs/core[test]"
          pip install -e "./libs/events[test]"
          pip install -e "./libs/context[test]"
          pip install -e "./libs/sdlc[test]"
          
          # Install services
          pip install -e "./services/api[test]"
          pip install -e "./services/agents[test]"
          pip install -e "./services/context-manager[test]"

      - name: Run Behave tests with coverage
        run: |
          # Create .coveragerc file
          echo "[run]" > .coveragerc
          echo "source = libs,services" >> .coveragerc
          echo "omit = */tests/*,*/__pycache__/*" >> .coveragerc
          
          # Run behave with coverage
          PYTHONPATH=./libs coverage run -m behave tests/features
          
          # Generate coverage report
          coverage report
          coverage xml -o coverage.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 7
          if-no-files-found: warn

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install pip==23.3.2
          python -m pip install black isort pylint

      - name: Run Black
        run: black --config pyproject.toml .

      - name: Run isort
        run: isort --settings-path pyproject.toml .

      - name: Run Pylint
        run: |
          find libs -name "*.py" | xargs pylint --rcfile=pyproject.toml --disable=missing-module-docstring,missing-class-docstring,missing-function-docstring,empty-docstring || true
          find services -name "*.py" | xargs pylint --rcfile=pyproject.toml --disable=missing-module-docstring,missing-class-docstring,missing-function-docstring,empty-docstring || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit
        run: bandit -r libs/ services/ -c .bandit -lll

      - name: Run Safety Check
        run: safety check

  build:
    name: Build and Push Images
    needs: [test, lint, security]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_only != 'true')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Debug information
        if: github.event.inputs.debug_enabled == 'true'
        run: |
          echo "Debug mode enabled"
          echo "GitHub context:"
          echo "  Actor: ${{ github.actor }}"
          echo "  Repository: ${{ github.repository }}"
          echo "  Repository Owner: ${{ github.repository_owner }}"
          echo "  Event name: ${{ github.event_name }}"
          echo "  Ref: ${{ github.ref }}"
          echo "Docker info:"
          docker info
          echo "Environment variables:"
          env | sort

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push master image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/master/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for web-client
        id: web-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.WEB_CLIENT_IMAGE }}

      - name: Build and push web-client image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/web-client/Dockerfile
          push: true
          tags: |
            ${{ steps.web-meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.WEB_CLIENT_IMAGE }}:latest
          labels: ${{ steps.web-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-production:
    name: Deploy to Production
    needs: [build]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_only != 'true' && github.event.inputs.build_only != 'true')
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://cahoots.cc
    steps:
      - uses: actions/checkout@v3

      - name: Install Civo CLI
        run: curl -sL https://civo.com/get | sh

      - name: Configure Civo CLI
        run: |
          civo apikey add production-key ${{ secrets.CIVO_API_KEY }}
          civo kubernetes config cahoots-prod --save

      - name: Deploy to Kubernetes
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          # Apply security policies first
          kubectl apply -f k8s/security.yaml
          
          # Apply database and Redis
          kubectl apply -f k8s/postgres.yaml
          kubectl apply -f k8s/redis.yaml
          
          # Set up registry secret for GHCR
          kubectl create secret docker-registry ghcr-auth \
            --namespace=cahoots \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --dry-run=client -o yaml | kubectl apply -f -

          # Wait for database to be ready
          echo "Waiting for database to be ready..."
          kubectl -n cahoots wait --for=condition=available --timeout=60s deployment/postgres || {
            echo "Database failed to start. Logs:"
            kubectl -n cahoots logs -l app=postgres
            exit 1
          }

          # Deploy services
          echo "Deploying services..."
          kubectl apply -f k8s/master.yaml
          kubectl apply -f k8s/web-client.yaml
          
          # Update images
          kubectl set image deployment/master -n cahoots master=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$GITHUB_SHA
          kubectl set image deployment/web-client -n cahoots web-client=${{ env.REGISTRY }}/${{ env.WEB_CLIENT_IMAGE }}:$GITHUB_SHA

          # Apply ingress
          kubectl apply -f k8s/ingress.yaml

          # Wait for deployments and show status
          echo "Waiting for deployments to be ready..."
          kubectl -n cahoots rollout status deployment/master
          kubectl -n cahoots rollout status deployment/web-client

          echo "Current pod status:"
          kubectl -n cahoots get pods

  coverage:
    name: Coverage Report
    needs: test
    runs-on: ubuntu-latest
    continue-on-error: true
    if: always()
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Try to download coverage reports
        id: download
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: ./
      
      - name: Check if coverage file exists
        id: check_files
        run: |
          if [ -f "coverage.xml" ]; then
            echo "coverage_exists=true" >> $GITHUB_OUTPUT
          else
            echo "coverage_exists=false" >> $GITHUB_OUTPUT
            echo "No coverage file found. Skipping coverage report generation."
          fi

      - name: Generate coverage report
        if: steps.check_files.outputs.coverage_exists == 'true'
        run: |
          pip install coverage
          coverage report -m --rcfile=.coveragerc || echo "Could not generate report from XML file"
          echo "Coverage XML report is available at coverage.xml"