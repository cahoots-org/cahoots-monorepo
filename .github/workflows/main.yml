name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: ai-dev-team
  ECS_SERVICE: ai-dev-team
  ECS_CLUSTER: ai-dev-team-cluster
  TERRAFORM_VERSION: 1.5.0

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          pip install github3.py
          
      - name: Run tests
        run: |
          pytest tests/ --cov=src/ --cov-report=xml
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build and push Docker images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build and push Master service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:master-latest -f docker/master/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:master-latest
          
          # Build and push Project Manager service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:pm-latest -f docker/project_manager/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:pm-latest
          
          # Build and push Developer service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:dev-latest -f docker/developer/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev-latest
          
          # Build and push UX Designer service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:ux-latest -f docker/ux_designer/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:ux-latest
          
          # Build and push Tester service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:tester-latest -f docker/tester/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:tester-latest
          
          # Build and push Context Manager service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:context-latest -f docker/context_manager/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:context-latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
          
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan
        
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
          
      - name: Update ECS services
        run: |
          for service in master pm dev ux tester context; do
            aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE-$service --force-new-deployment
          done 
